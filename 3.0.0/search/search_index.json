{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How does phabalicious work in two sentences Phabalicious is using configuration stored in a special file in the root of your project (the fabfile.yaml ) to run tasks in a shell. This shell can be provided by a docker-container, a ssh-connection or a local shell. This means, you can store all your devops-scripts in the fabfile and apply it to a list of configurations. Phabalicious tries to abstract away the inner workings of a host and give the user a handful useful commands to run common tasks, like: deploying new code to a remote installation reset a remote installation to its defaults. backup/ restore data copy data from one installation to another scaffold new projects run scripts on different local or remote installations. handle SSH-tunnels transparently optionally work with our docker-based local development-stack multibasebox History Phabalicious started as a shell-script to reset a Drupal-installation. We used fabric as a base for all the tasks and fabalicious grew to its first official release 1.0. But it got unmaintainable, as it was not flexible enough to handle new requirements, so the first rewrite started to get a more modular and extendable version: Fabalicious 2.0. It supported hooks for custom scripts, was extendable by new methods, later on it got a complete plugin-system and what not. Meanwhile fabric (the foundation of fabalicious) took a different route. Fabric 2.0 was not compatible anymore with 1.x and so with fabalicious. As most of our users were on OS X, handling the python dependencies got also more complicated. And only a handful devs in our company could write python. Another hurdle was that fabric supports SSH and local connections only, running commands in different ways (like docker exec ) was cumbersome. So the idea was born, to do another rewrite in PHP and use Symfony console as a base for it. Phabalicious 3 still supports the fabfile-format from version 2, but the command-line syntax changed a lot, and is now more compliant with posix.","title":"How does phabalicious work in two sentences"},{"location":"#how-does-phabalicious-work-in-two-sentences","text":"Phabalicious is using configuration stored in a special file in the root of your project (the fabfile.yaml ) to run tasks in a shell. This shell can be provided by a docker-container, a ssh-connection or a local shell. This means, you can store all your devops-scripts in the fabfile and apply it to a list of configurations. Phabalicious tries to abstract away the inner workings of a host and give the user a handful useful commands to run common tasks, like: deploying new code to a remote installation reset a remote installation to its defaults. backup/ restore data copy data from one installation to another scaffold new projects run scripts on different local or remote installations. handle SSH-tunnels transparently optionally work with our docker-based local development-stack multibasebox","title":"How does phabalicious work in two sentences"},{"location":"#history","text":"Phabalicious started as a shell-script to reset a Drupal-installation. We used fabric as a base for all the tasks and fabalicious grew to its first official release 1.0. But it got unmaintainable, as it was not flexible enough to handle new requirements, so the first rewrite started to get a more modular and extendable version: Fabalicious 2.0. It supported hooks for custom scripts, was extendable by new methods, later on it got a complete plugin-system and what not. Meanwhile fabric (the foundation of fabalicious) took a different route. Fabric 2.0 was not compatible anymore with 1.x and so with fabalicious. As most of our users were on OS X, handling the python dependencies got also more complicated. And only a handful devs in our company could write python. Another hurdle was that fabric supports SSH and local connections only, running commands in different ways (like docker exec ) was cumbersome. So the idea was born, to do another rewrite in PHP and use Symfony console as a base for it. Phabalicious 3 still supports the fabfile-format from version 2, but the command-line syntax changed a lot, and is now more compliant with posix.","title":"History"},{"location":"Changelog/","text":"Changelog 3.0.0-beta.3 / 2019-01-26 New Add transform to questions, update documentation, fix tests Refactor questions in app:scaffold questions are now part of the scaffold.yml Add support for copying a .netrc file to the docker container New command jira which will show all open tickets for the given project and user. (#22) 3.0.0-beta.2 / 2019-01-19 New Add support for .fabfile.local.yaml in user-folder Show a message when a new version of phabalicious is available. Fixed Documentation for the new jira-command (#22) Remove trailing semicolon (Fixes #23) Report a proper error message when handling modules_enabled.txt or modules_disabled.txt is failing Fix shell-completion 3.0.0-beta.1 / 2019-01-10 fixed Fix logic error in InstallCommand, add testcases (Fixes #21) Wrap interactive shell with bash only if we have a command to execute Try up to 5 parent folders to find suitable fabfiles (Fixes #18) Use paralell uploads for ftp-deployments Use a login-shell when running drush or drupalconsole interactively. (Fixes #20) Add autocompletion for install-from 3.0.0-alpha.8 / 2018-12-20 fixed Call overridden methods only one time, add missin reset-implementation to platform-method (fixes #14) Increase verbosity of app:scaffold Add missing twig-dependency to phar-creation (fixes #17) Fix handling of relative paths in app:scaffold (Fixes #16) Fix parsing of multiple IPs from a docker-container (Fixes #15) Pass available arguments to autocompletion for command copy-from (Fixes #13) Run drupalconsole in an interactive shell 3.0.0-alpha.7 / 2018-12-14 fixed Handle app-options correctly when doing shell-autocompletion (Fixes #12) Silent warnings when doing autocompletion (fixes #11) Better command output for start-remote-access (fixes #10) Throw exception if docker task fails Fix command output parsing Source /etc/profile and .bashrc Better defaults for lftp 3.0.0-alpha.6 / 2018-12-11 fixed Some bugfixes for ftp-deployments Nicer output Add docs for shell-autcompletion Fix fish autocompletion (sort of) Set version number, when not bundling as phar 3.0.0-alpha.5 / 2018-12-08 fixed Use real version number Fix phar-build 3.0.0-alpha.4 / 2018-12-08 new New command self-update , will download and install the latest available version New method ftp-sync to deploy code-bases to a remote ftp-instance Introduction of a password-manager for retrieving passwords from the user or a special file changed Switch to box for building phars fixed Do not run empty script lines (Fixes #8) Set folder for script-phase Set rootFolder fot task-specific scripts Support legacy host-types 3.0.0 develop Fabalicious is now rewritten in PHP, so we changed the name to make the separation more clear. Phabalicious is now a symfony console app and uses a more unix-style approach to arguments and options. E.g. instead of config: name-of-config use --config= name-of-config Why the rewrite Python on Mac OS X is hard, multiple versions, multiple locations etc. Every machine needed some magic hands to get fabalicious working on it. Fabalicious itself is written in python 2.x, but the world is moving on to python 3. Fabric, the underlying lib we used for fabalicious is also moving forward to version 2 which is not backwards compatible yet with fabric 1. On the other side we are now maintaining more and more containerized setups where you do not need ssh to run commands in. A popular example is docker and its whole universe. Fabric couldn't help us here, and fabric is moving into a different direction. And as a specialized Drupal boutique we write PHP all day long. To make it easier for our team to improve the toolset by ourselves and get help from the rest of the community, using PHP/ Symfony as a base for the rewrite was a no-brainer. Why not use existing tools, like robo , deployer or other tools? These tools are valuable instruments in our tool-belt, but none of them fit our requirements completely. We see phabalicious as a meta-tool integrating with all of them in nice and easy way. We need a lot of flexibility as we need to support a lot of different tech- and hosting-stacks, so we decided to port fabalicious to phabalicious. There's a lot of change going on here, but the structure of the fabfile.yaml is still the same. Changed command line options and arguments As fabric (the underlying lib we used for fabalicious) is quite different to symfony console apps there are more subtle changes. For example you can invoke only one task per run. With fabalicious it was easy to run multiple commands: fab config:mbb docker:run reset ssh This is not possible anymore with phabalicious, you need to run the commands in sequence. If you need that on a regular basis, a script might be a good workaround. Most notably the handling of arguments and options has changed a lot. Fabric gave us a lot of flexibility here, symfony is more strict, but has on the other side some advantages for example self-documenting all possible arguments and options for a given task. Some examples Old syntax New syntax fab config:mbb about phab about --config mbb fab config:mbb about phab --config=mbb about fab config:mbb blueprint:de deploy phab deploy --config mbb --blueprint de fab config:mbb blueprint:de deploy phab --config=mbb --blueprint=de mbb New features Introduction of ShellProviders, they will provide a shell, to run scripts into. Currently implemented are local , run the shell-commands on your local host ssh , runs the shell-commands on a remote host. Every shell-provider can have different required options. Currently add the needed shell-provider to your list of needs, e.g. needs: - local - git - drush new global settings disableScripts which will not add the script -method to the needs. there's a new command to list all blueprints: list:blueprints new shell-provider dockerExec which will start a shell with the help of docker exec instead of ssh. new config-option shellProvider , where you can override the shell-provider to your liking. hosts: mbb: shellProvider: docker-exec You can get help for a specific task via phab help task . It will show all possible options and some help. docker-compose version 23 changes the schema how names of docker-containers are constructed. To support this change we can now declare the needed service to compute the correct container-name from. hosts: testHost: docker: service: web The name will be discarded, if a service -entry is set. new method ftp-sync , it's a bit special. This method creates the app into a temporary folder, and syncs it via lftp to a remote instance. Here's a complete example (most of them are provided via sensible defaults): excludeFiles: ftp-sync: - .git/ - node_modules hosts: ftpSyncSample: needs: - git - ftp-sync - local ftp: user: ftp-user password: ftp-password # host: ftp-host port: 21 lftpOptions: - --ignoreTime - --verbose=3 - --no-perms You can add your password to the file .phabalicious-credentials (see passwords.md) so phabalicious pick it up. Changed docker:startRemoteAccess is now the task start-remote-access as it makes more sense. the list -task needed to be renamed to list:hosts . the --list task (which was built into fabric) is now list . the offline -task got removed, instead add the -offline -option and set it to 1, e.g. phab --offline=1 --config=mbb about the task logLevel is replaced by the builtin -v -option autocompletion works now differently than before, but now bash and zsh are supported. Please have a look into the documentation how to install it. for fish-shells phab _completion --generate-hook --shell-type fish | source for zsh/bash-shells source (phab _completion --generate-hook) listBackups got renamed to list:backups backupDB and backupFiles got removed, use phab backup files or phab backup db , the same mechanism works for restoring a backup. getFile got renamed to get:file putFile got renamed to put:file getBackup got renamed to get:backup getFilesDump got renamed to get:files-backup getProperty got renamed to get:property getSQLDump got renamed to get:sql-dump restoreSQLFromFile got renamed to restore:sql-from-file copyDBFrom got renamed to copy-from config db copyFilesFrom got renamed to copy-from config files installFrom got renamed to install:from Deprecated script-function fail_on_error is deprecated, use breakOnFirstError( bool ) runLocally is deprecated, add a new need local to the lists of needs. strictHostKeyChecking is deprecated, use disableKnownHosts instead. getProperty is deprecated and got renamed to get-property ssh is deprecated and got renamed to shell as some implementations might not use ssh. sshCommand is deprecated and got renamed to shell:command and will return the command to run a shell with the given configuration the needs drush7 , drush8 and drush9 are deprecated, use the need drush and the newly introduced options drupalVersion and drushVersion instead, the slack -configuration got removed and got replaced by a general notification solution, currently only with a mattermost implementation.","title":"Changelog"},{"location":"Changelog/#changelog","text":"","title":"Changelog"},{"location":"Changelog/#300-beta3-2019-01-26","text":"","title":"3.0.0-beta.3 / 2019-01-26"},{"location":"Changelog/#new","text":"Add transform to questions, update documentation, fix tests Refactor questions in app:scaffold questions are now part of the scaffold.yml Add support for copying a .netrc file to the docker container New command jira which will show all open tickets for the given project and user. (#22)","title":"New"},{"location":"Changelog/#300-beta2-2019-01-19","text":"","title":"3.0.0-beta.2 / 2019-01-19"},{"location":"Changelog/#new_1","text":"Add support for .fabfile.local.yaml in user-folder Show a message when a new version of phabalicious is available.","title":"New"},{"location":"Changelog/#fixed","text":"Documentation for the new jira-command (#22) Remove trailing semicolon (Fixes #23) Report a proper error message when handling modules_enabled.txt or modules_disabled.txt is failing Fix shell-completion","title":"Fixed"},{"location":"Changelog/#300-beta1-2019-01-10","text":"","title":"3.0.0-beta.1 / 2019-01-10"},{"location":"Changelog/#fixed_1","text":"Fix logic error in InstallCommand, add testcases (Fixes #21) Wrap interactive shell with bash only if we have a command to execute Try up to 5 parent folders to find suitable fabfiles (Fixes #18) Use paralell uploads for ftp-deployments Use a login-shell when running drush or drupalconsole interactively. (Fixes #20) Add autocompletion for install-from","title":"fixed"},{"location":"Changelog/#300-alpha8-2018-12-20","text":"","title":"3.0.0-alpha.8 / 2018-12-20"},{"location":"Changelog/#fixed_2","text":"Call overridden methods only one time, add missin reset-implementation to platform-method (fixes #14) Increase verbosity of app:scaffold Add missing twig-dependency to phar-creation (fixes #17) Fix handling of relative paths in app:scaffold (Fixes #16) Fix parsing of multiple IPs from a docker-container (Fixes #15) Pass available arguments to autocompletion for command copy-from (Fixes #13) Run drupalconsole in an interactive shell","title":"fixed"},{"location":"Changelog/#300-alpha7-2018-12-14","text":"","title":"3.0.0-alpha.7 / 2018-12-14"},{"location":"Changelog/#fixed_3","text":"Handle app-options correctly when doing shell-autocompletion (Fixes #12) Silent warnings when doing autocompletion (fixes #11) Better command output for start-remote-access (fixes #10) Throw exception if docker task fails Fix command output parsing Source /etc/profile and .bashrc Better defaults for lftp","title":"fixed"},{"location":"Changelog/#300-alpha6-2018-12-11","text":"","title":"3.0.0-alpha.6 / 2018-12-11"},{"location":"Changelog/#fixed_4","text":"Some bugfixes for ftp-deployments Nicer output Add docs for shell-autcompletion Fix fish autocompletion (sort of) Set version number, when not bundling as phar","title":"fixed"},{"location":"Changelog/#300-alpha5-2018-12-08","text":"","title":"3.0.0-alpha.5 / 2018-12-08"},{"location":"Changelog/#fixed_5","text":"Use real version number Fix phar-build","title":"fixed"},{"location":"Changelog/#300-alpha4-2018-12-08","text":"","title":"3.0.0-alpha.4 / 2018-12-08"},{"location":"Changelog/#new_2","text":"New command self-update , will download and install the latest available version New method ftp-sync to deploy code-bases to a remote ftp-instance Introduction of a password-manager for retrieving passwords from the user or a special file","title":"new"},{"location":"Changelog/#changed","text":"Switch to box for building phars","title":"changed"},{"location":"Changelog/#fixed_6","text":"Do not run empty script lines (Fixes #8) Set folder for script-phase Set rootFolder fot task-specific scripts Support legacy host-types","title":"fixed"},{"location":"Changelog/#300-develop","text":"Fabalicious is now rewritten in PHP, so we changed the name to make the separation more clear. Phabalicious is now a symfony console app and uses a more unix-style approach to arguments and options. E.g. instead of config: name-of-config use --config= name-of-config","title":"3.0.0 develop"},{"location":"Changelog/#why-the-rewrite","text":"Python on Mac OS X is hard, multiple versions, multiple locations etc. Every machine needed some magic hands to get fabalicious working on it. Fabalicious itself is written in python 2.x, but the world is moving on to python 3. Fabric, the underlying lib we used for fabalicious is also moving forward to version 2 which is not backwards compatible yet with fabric 1. On the other side we are now maintaining more and more containerized setups where you do not need ssh to run commands in. A popular example is docker and its whole universe. Fabric couldn't help us here, and fabric is moving into a different direction. And as a specialized Drupal boutique we write PHP all day long. To make it easier for our team to improve the toolset by ourselves and get help from the rest of the community, using PHP/ Symfony as a base for the rewrite was a no-brainer. Why not use existing tools, like robo , deployer or other tools? These tools are valuable instruments in our tool-belt, but none of them fit our requirements completely. We see phabalicious as a meta-tool integrating with all of them in nice and easy way. We need a lot of flexibility as we need to support a lot of different tech- and hosting-stacks, so we decided to port fabalicious to phabalicious. There's a lot of change going on here, but the structure of the fabfile.yaml is still the same.","title":"Why the rewrite"},{"location":"Changelog/#changed-command-line-options-and-arguments","text":"As fabric (the underlying lib we used for fabalicious) is quite different to symfony console apps there are more subtle changes. For example you can invoke only one task per run. With fabalicious it was easy to run multiple commands: fab config:mbb docker:run reset ssh This is not possible anymore with phabalicious, you need to run the commands in sequence. If you need that on a regular basis, a script might be a good workaround. Most notably the handling of arguments and options has changed a lot. Fabric gave us a lot of flexibility here, symfony is more strict, but has on the other side some advantages for example self-documenting all possible arguments and options for a given task.","title":"Changed command line options and arguments"},{"location":"Changelog/#some-examples","text":"Old syntax New syntax fab config:mbb about phab about --config mbb fab config:mbb about phab --config=mbb about fab config:mbb blueprint:de deploy phab deploy --config mbb --blueprint de fab config:mbb blueprint:de deploy phab --config=mbb --blueprint=de mbb","title":"Some examples"},{"location":"Changelog/#new-features","text":"Introduction of ShellProviders, they will provide a shell, to run scripts into. Currently implemented are local , run the shell-commands on your local host ssh , runs the shell-commands on a remote host. Every shell-provider can have different required options. Currently add the needed shell-provider to your list of needs, e.g. needs: - local - git - drush new global settings disableScripts which will not add the script -method to the needs. there's a new command to list all blueprints: list:blueprints new shell-provider dockerExec which will start a shell with the help of docker exec instead of ssh. new config-option shellProvider , where you can override the shell-provider to your liking. hosts: mbb: shellProvider: docker-exec You can get help for a specific task via phab help task . It will show all possible options and some help. docker-compose version 23 changes the schema how names of docker-containers are constructed. To support this change we can now declare the needed service to compute the correct container-name from. hosts: testHost: docker: service: web The name will be discarded, if a service -entry is set. new method ftp-sync , it's a bit special. This method creates the app into a temporary folder, and syncs it via lftp to a remote instance. Here's a complete example (most of them are provided via sensible defaults): excludeFiles: ftp-sync: - .git/ - node_modules hosts: ftpSyncSample: needs: - git - ftp-sync - local ftp: user: ftp-user password: ftp-password # host: ftp-host port: 21 lftpOptions: - --ignoreTime - --verbose=3 - --no-perms You can add your password to the file .phabalicious-credentials (see passwords.md) so phabalicious pick it up.","title":"New features"},{"location":"Changelog/#changed_1","text":"docker:startRemoteAccess is now the task start-remote-access as it makes more sense. the list -task needed to be renamed to list:hosts . the --list task (which was built into fabric) is now list . the offline -task got removed, instead add the -offline -option and set it to 1, e.g. phab --offline=1 --config=mbb about the task logLevel is replaced by the builtin -v -option autocompletion works now differently than before, but now bash and zsh are supported. Please have a look into the documentation how to install it. for fish-shells phab _completion --generate-hook --shell-type fish | source for zsh/bash-shells source (phab _completion --generate-hook) listBackups got renamed to list:backups backupDB and backupFiles got removed, use phab backup files or phab backup db , the same mechanism works for restoring a backup. getFile got renamed to get:file putFile got renamed to put:file getBackup got renamed to get:backup getFilesDump got renamed to get:files-backup getProperty got renamed to get:property getSQLDump got renamed to get:sql-dump restoreSQLFromFile got renamed to restore:sql-from-file copyDBFrom got renamed to copy-from config db copyFilesFrom got renamed to copy-from config files installFrom got renamed to install:from","title":"Changed"},{"location":"Changelog/#deprecated","text":"script-function fail_on_error is deprecated, use breakOnFirstError( bool ) runLocally is deprecated, add a new need local to the lists of needs. strictHostKeyChecking is deprecated, use disableKnownHosts instead. getProperty is deprecated and got renamed to get-property ssh is deprecated and got renamed to shell as some implementations might not use ssh. sshCommand is deprecated and got renamed to shell:command and will return the command to run a shell with the given configuration the needs drush7 , drush8 and drush9 are deprecated, use the need drush and the newly introduced options drupalVersion and drushVersion instead, the slack -configuration got removed and got replaced by a general notification solution, currently only with a mattermost implementation.","title":"Deprecated"},{"location":"app-create-destroy/","text":"Creating/ destroying an app from existing configuration Phabalicious can create or delete a complete app with two commands: phab --config= config app:create --copy-from= other-config phab --config= config app:destroy Both commands executes a list of stages, which can be influenced via configuration the standard stages These are the standard stages. You can override them by adding them to the global section of your fabfile: appStages: create: - stage: installCode - stage: spinUp - stage: installDependencies - stage: install createCode: - stage: installCode - stage: installDependencies deploy: - stage: spinUp destroy: - stage: spinDown - stage: deleteContainers createCode is only used by the ftp-sync -method, to create a complete code version of an app. Creating a new app Run the phab-command as usual. If you want to copy from an existing installation, add the --copy-from -option. phab --config= your-config app:create If the app is already created (there's an existing .projectCreated -file in the root of the installation), only the deploy -stage will be executed, and afterwards the deploy-task will be executed. If the app is not created yet, all create -stages will be executed. If nothing went wrong you should have a running installation of the given configuration Destroying an app phab --config= your-config app:destroy This will execute all destroy -stages and delete the project-folder afterwards. Blueprints Both commands work best when using blueprints. This will allow to create a config and an app from a single string like a name of a feature. Some examples: phab --config=some-config --blueprint=feature/ some-feature create:app Will create a new app from a blueprinted config.","title":"Creating/ destroying an app from existing configuration"},{"location":"app-create-destroy/#creating-destroying-an-app-from-existing-configuration","text":"Phabalicious can create or delete a complete app with two commands: phab --config= config app:create --copy-from= other-config phab --config= config app:destroy Both commands executes a list of stages, which can be influenced via configuration","title":"Creating/ destroying an app from existing configuration"},{"location":"app-create-destroy/#the-standard-stages","text":"These are the standard stages. You can override them by adding them to the global section of your fabfile: appStages: create: - stage: installCode - stage: spinUp - stage: installDependencies - stage: install createCode: - stage: installCode - stage: installDependencies deploy: - stage: spinUp destroy: - stage: spinDown - stage: deleteContainers createCode is only used by the ftp-sync -method, to create a complete code version of an app.","title":"the standard stages"},{"location":"app-create-destroy/#creating-a-new-app","text":"Run the phab-command as usual. If you want to copy from an existing installation, add the --copy-from -option. phab --config= your-config app:create If the app is already created (there's an existing .projectCreated -file in the root of the installation), only the deploy -stage will be executed, and afterwards the deploy-task will be executed. If the app is not created yet, all create -stages will be executed. If nothing went wrong you should have a running installation of the given configuration","title":"Creating a new app"},{"location":"app-create-destroy/#destroying-an-app","text":"phab --config= your-config app:destroy This will execute all destroy -stages and delete the project-folder afterwards.","title":"Destroying an app"},{"location":"app-create-destroy/#blueprints","text":"Both commands work best when using blueprints. This will allow to create a config and an app from a single string like a name of a feature. Some examples: phab --config=some-config --blueprint=feature/ some-feature create:app Will create a new app from a blueprinted config.","title":"Blueprints"},{"location":"app-scaffold/","text":"Scaffolding a new app Phabalicious has a simple but powerful scaffold-command. It will read a yml-file and interpret the contents. It will use the existing pattern-replacement used for scripts and twig for changing file-contents. The scaffolding and fixture-files can live remotely or on your file-system. Here's an example of a scaffold-file: questions: name: question: The Name of this project shortName: question: The short-name of this project validation: /^[A-Za-z0-9]{3,5}$/ error: The shortname may consist of 3 to 5 letters (A-Z) or digits (0-9) transform: lowercase variables: composerProject: drupal-composer/drupal-project:8.x-dev webRoot: web assets: - .fabfile.yaml - docker-compose.yml - docker-compose-mbb.yml deployModuleAssets: - deployModule/%shortName%_deploy.info.yml - deployModule/%shortName%_deploy.module - deployModule/%shortName%_deploy.install scaffold: - rm -rf %rootFolder% - composer create-project %composerProject% %rootFolder% --stability dev --no-interaction - cd %rootFolder%; composer require drupal/coffee - cd %rootFolder%; composer require drupal/devel - copy_assets(%rootFolder%) - copy_assets(%rootFolder%/%webRoot%/modules/custom/%shortName%_deploy, deployModuleAssets) - cd %rootFolder%; git init . - cd %rootFolder%; git add . - cd %rootFolder%; git commit -m Initial commit by phabalicious The fabfile needs at least the questions and the scaffold -section. The scaffold -section is a list of commands, executed by phabalicious one by one. It will use the pattern-replacement known for scripts. The questions -section This section contains a list of questions to be asked when running the scaffold-command. The yaml-key will get the value inputted by the user and can be used as a replacement pattern or in twig-templates. Answers can be validated against a regex and/or transformed to lower- or uppercase. An example: questions: key : question: the text to display validation: the regex to check the input against to error: the error message to display, when validation fails transform: lowercase|uppercase For non-interactive usage you can pass the values via commandline-options, where the option-name is the same as the key, for the above example: command-line option Question key --\\ key> \\ key> --name name --short-name shortName The scaffold -section Phabalicious will provide the following replacement-patterns out of the box: Pattern Value %rootFolder% The folder the app will be installed into %name% The name of the app %projectFolder% a cleaned version of the app-name, suitable for machine-names. %shortName% The short-name %uuid% a random-uuid the variables -section You can add own variables via the variables -section. In the above example, the variable composerProject will be available in the scaffold -section via the pattern %composerProject% the assets -section You can have multiple assets-sections, assets is a default one. It contains a list if template files which will be processed by twig and placed at a specific location. You'll have all variables available as twig-variables inside the template, to use them, just use {{ theNameOfVariable }} e.g. {{ name }} To add a new asset-section, just use a new root-level key (in the above example this would be deploymentModuleAssets The assets-paths must be relative to the yaml-file containing the scaffold-commands. the internal command copy_assets copy_assets can be used in the scaffold-section to copy assets into a specific location. The syntax is copyAssets( targetFolder , assetsKey=assets ) Phabalicious will load the asset-file, apply the replacement-patterns to the file-name (see the deploymentAssets for an example) and parse the content via twig. The result will bee stored inside the targetFolder Inheritance Similar to other parts of Phabalicious, scaffold-files can use inheritance, for example to use the above scaffold-file, but install drupal commerce: inheritsFrom: - drupal-8.yml - variables: composerProject: drupalcommerce/project-base This will inherit all content from the drupal-8.yml-file and merged with this content. This means, the `composerProject\u00b4-variable will be overridden, but everything else will be inherited. This makes it easy to reuse existing scaffold-files Examples Drupal 8 (d8.yml) variables: composerProject: drupal-composer/drupal-project:8.x-dev webRoot: web assets: - .fabfile.yaml - docker-compose.yml - docker-compose-mbb.yml deployModuleAssets: - deployModule/%shortName%_deploy.info.yml - deployModule/%shortName%_deploy.module - deployModule/%shortName%_deploy.install sshKeys: - ssh-keys/docker-root-key - ssh-keys/docker-root-key.pub - ssh-keys/known_hosts scaffold: - rm -rf %rootFolder% - composer create-project %composerProject% %rootFolder% --stability dev --no-interaction - cd %rootFolder%; composer require drupal/coffee - cd %rootFolder%; composer require drupal/devel - copy_assets(%rootFolder%) - copy_assets(%rootFolder%/%webRoot%/modules/custom/%shortName%_deploy, deployModuleAssets) - copy_assets(%rootFolder%/ssh-keys, sshKeys) - cd %rootFolder%; git init . - cd %rootFolder%; git add . - cd %rootFolder%; git commit -m Initial commit by phabalicious drupal commerce inheritsFrom: - d8.yml variables: composerProject: drupalcommerce/project-base thunder inheritsFrom: - d8.yml variables: composerProject: burdamagazinorg/thunder-project webRoot: docroot Laravel the scaffold-file: variables: composerProject: laravel/laravel:5.4 webRoot: public assets: - .fabfile.yaml - docker-compose.yml - docker-compose-mbb.yml scaffold: - rm -rf %rootFolder% - composer create-project %composerProject% %rootFolder% --stability dev --no-interaction - cd %rootFolder%; composer require factorial-io/fabalicious:dev-develop - copy_assets(%rootFolder%) - cd %rootFolder%; git init . - cd %rootFolder%; git add . - cd %rootFolder%; git commit -m Initial commit by phabalicious the fabfile-template name: {{ name }} key: {{ shortName }} deploymentModule: {{ shortName }}_deploy requires: 2.0.0 needs: - ssh - composer - docker - git - files hosts: mbb: host: {{ projectFolder }}.test user: root port: {{ 1024 + random(20000) }} type: dev rootFolder: /var/www/{{ webRoot }} gitRootFolder: /var/www backupFolder: /var/www/backups branch: develop database: name: {{ projectFolder|replace({'-': '_'}) }}_db user: root pass: admin host: mysql","title":"Scaffolding a new app"},{"location":"app-scaffold/#scaffolding-a-new-app","text":"Phabalicious has a simple but powerful scaffold-command. It will read a yml-file and interpret the contents. It will use the existing pattern-replacement used for scripts and twig for changing file-contents. The scaffolding and fixture-files can live remotely or on your file-system. Here's an example of a scaffold-file: questions: name: question: The Name of this project shortName: question: The short-name of this project validation: /^[A-Za-z0-9]{3,5}$/ error: The shortname may consist of 3 to 5 letters (A-Z) or digits (0-9) transform: lowercase variables: composerProject: drupal-composer/drupal-project:8.x-dev webRoot: web assets: - .fabfile.yaml - docker-compose.yml - docker-compose-mbb.yml deployModuleAssets: - deployModule/%shortName%_deploy.info.yml - deployModule/%shortName%_deploy.module - deployModule/%shortName%_deploy.install scaffold: - rm -rf %rootFolder% - composer create-project %composerProject% %rootFolder% --stability dev --no-interaction - cd %rootFolder%; composer require drupal/coffee - cd %rootFolder%; composer require drupal/devel - copy_assets(%rootFolder%) - copy_assets(%rootFolder%/%webRoot%/modules/custom/%shortName%_deploy, deployModuleAssets) - cd %rootFolder%; git init . - cd %rootFolder%; git add . - cd %rootFolder%; git commit -m Initial commit by phabalicious The fabfile needs at least the questions and the scaffold -section. The scaffold -section is a list of commands, executed by phabalicious one by one. It will use the pattern-replacement known for scripts.","title":"Scaffolding a new app"},{"location":"app-scaffold/#the-questions-section","text":"This section contains a list of questions to be asked when running the scaffold-command. The yaml-key will get the value inputted by the user and can be used as a replacement pattern or in twig-templates. Answers can be validated against a regex and/or transformed to lower- or uppercase. An example: questions: key : question: the text to display validation: the regex to check the input against to error: the error message to display, when validation fails transform: lowercase|uppercase For non-interactive usage you can pass the values via commandline-options, where the option-name is the same as the key, for the above example: command-line option Question key --\\ key> \\ key> --name name --short-name shortName","title":"The questions-section"},{"location":"app-scaffold/#the-scaffold-section","text":"Phabalicious will provide the following replacement-patterns out of the box: Pattern Value %rootFolder% The folder the app will be installed into %name% The name of the app %projectFolder% a cleaned version of the app-name, suitable for machine-names. %shortName% The short-name %uuid% a random-uuid","title":"The scaffold-section"},{"location":"app-scaffold/#the-variables-section","text":"You can add own variables via the variables -section. In the above example, the variable composerProject will be available in the scaffold -section via the pattern %composerProject%","title":"the variables-section"},{"location":"app-scaffold/#the-assets-section","text":"You can have multiple assets-sections, assets is a default one. It contains a list if template files which will be processed by twig and placed at a specific location. You'll have all variables available as twig-variables inside the template, to use them, just use {{ theNameOfVariable }} e.g. {{ name }} To add a new asset-section, just use a new root-level key (in the above example this would be deploymentModuleAssets The assets-paths must be relative to the yaml-file containing the scaffold-commands.","title":"the assets-section"},{"location":"app-scaffold/#the-internal-command-copy_assets","text":"copy_assets can be used in the scaffold-section to copy assets into a specific location. The syntax is copyAssets( targetFolder , assetsKey=assets ) Phabalicious will load the asset-file, apply the replacement-patterns to the file-name (see the deploymentAssets for an example) and parse the content via twig. The result will bee stored inside the targetFolder","title":"the internal command copy_assets"},{"location":"app-scaffold/#inheritance","text":"Similar to other parts of Phabalicious, scaffold-files can use inheritance, for example to use the above scaffold-file, but install drupal commerce: inheritsFrom: - drupal-8.yml - variables: composerProject: drupalcommerce/project-base This will inherit all content from the drupal-8.yml-file and merged with this content. This means, the `composerProject\u00b4-variable will be overridden, but everything else will be inherited. This makes it easy to reuse existing scaffold-files","title":"Inheritance"},{"location":"app-scaffold/#examples","text":"","title":"Examples"},{"location":"app-scaffold/#drupal-8-d8yml","text":"variables: composerProject: drupal-composer/drupal-project:8.x-dev webRoot: web assets: - .fabfile.yaml - docker-compose.yml - docker-compose-mbb.yml deployModuleAssets: - deployModule/%shortName%_deploy.info.yml - deployModule/%shortName%_deploy.module - deployModule/%shortName%_deploy.install sshKeys: - ssh-keys/docker-root-key - ssh-keys/docker-root-key.pub - ssh-keys/known_hosts scaffold: - rm -rf %rootFolder% - composer create-project %composerProject% %rootFolder% --stability dev --no-interaction - cd %rootFolder%; composer require drupal/coffee - cd %rootFolder%; composer require drupal/devel - copy_assets(%rootFolder%) - copy_assets(%rootFolder%/%webRoot%/modules/custom/%shortName%_deploy, deployModuleAssets) - copy_assets(%rootFolder%/ssh-keys, sshKeys) - cd %rootFolder%; git init . - cd %rootFolder%; git add . - cd %rootFolder%; git commit -m Initial commit by phabalicious","title":"Drupal 8 (d8.yml)"},{"location":"app-scaffold/#drupal-commerce","text":"inheritsFrom: - d8.yml variables: composerProject: drupalcommerce/project-base","title":"drupal commerce"},{"location":"app-scaffold/#thunder","text":"inheritsFrom: - d8.yml variables: composerProject: burdamagazinorg/thunder-project webRoot: docroot","title":"thunder"},{"location":"app-scaffold/#laravel","text":"","title":"Laravel"},{"location":"app-scaffold/#the-scaffold-file","text":"variables: composerProject: laravel/laravel:5.4 webRoot: public assets: - .fabfile.yaml - docker-compose.yml - docker-compose-mbb.yml scaffold: - rm -rf %rootFolder% - composer create-project %composerProject% %rootFolder% --stability dev --no-interaction - cd %rootFolder%; composer require factorial-io/fabalicious:dev-develop - copy_assets(%rootFolder%) - cd %rootFolder%; git init . - cd %rootFolder%; git add . - cd %rootFolder%; git commit -m Initial commit by phabalicious","title":"the scaffold-file:"},{"location":"app-scaffold/#the-fabfile-template","text":"name: {{ name }} key: {{ shortName }} deploymentModule: {{ shortName }}_deploy requires: 2.0.0 needs: - ssh - composer - docker - git - files hosts: mbb: host: {{ projectFolder }}.test user: root port: {{ 1024 + random(20000) }} type: dev rootFolder: /var/www/{{ webRoot }} gitRootFolder: /var/www backupFolder: /var/www/backups branch: develop database: name: {{ projectFolder|replace({'-': '_'}) }}_db user: root pass: admin host: mysql","title":"the fabfile-template"},{"location":"available-tasks/","text":"-v/ -vv/ -vvv/ -vvvv Setting this option will increase the verbosity of phabalicious. Without this settings you'll get only warnings and errors and some informational stuff. If you encounter a problem try increasing the verbosity-level. --config phab --config= your-config Most of the phabalicious tasks need the option config . Setting the option will lookup your-config in the hosts -section of your fabfile.yaml and the data will be used to run your task with the correct environment. --offline phab --offline=1 --config= your-config task This task will disable remote configuration files. As phabalicious keeps copies of remote configuration-files in ~/.phabalicious it will try to load the configuration-file from there. --fabfile Phab --fabfile= path-to-your-fabfile ... This will try to load the fabfile.yaml from a different location: path-to-your-fabfile --blueprint phab --config= your-config --blueprint= branch-name task blueprint will try to load a blueprint-template from the fabfile.yaml and apply the input given as branch-name to the template. This is helpful if you want to create/ use a new configuration which has some dynamic parts like the name of the database, the name of the docker-container, etc. The task will look first in the host-config for the property blueprint , afterwards in the dockerHost-configuration config-name and eventually in the global namespace. If you want to print the generated configuration as yaml, then use the output -command. The computed configuration is used as the current configuration, that means, you can run other tasks against the generated configuration. Available replacement-patterns and what they do. Input is feature/XY-123-my_Branch-name , the project-name is Example project Replacement Pattern value %slug.with-hyphens.without-feature% xy-123-my-branch-name %slug.with-hyphens% feature-xy-123-my-branch-name %project-slug.with-hypens% example-project %slug% featurexy123mybranchname %project-slug% exampleproject %project-identifier% Example project %identifier% feature/XY-123-my_Branch-name %slug.without-feature% xy123mybranchname Here's an example blueprint: blueprint: inheritsFrom: http://some.host/data.yaml configName: '%project-slug%-%slug.with-hyphens.without-feature%.some.host.tld' branch: '%identifier%' database: name: '%slug.without-feature%_mysql' docker: projectFolder: '%project-slug%--%slug.with-hyphens.without-feature%' vhost: '%project-slug%-%slug.without-feature%.some.host.tld' name: '%project-slug%%slug.without-feature%_web_1' And the output of phab blueprint:feature/XY-123-my_Branch-name,configNamy= config-name ,output=true is hosts: phbackend-xy-123-my-branch-name.some.host.tld: branch: feature/XY-123-my_Branch-name configName: phbackend-xy-123-my-branch-name.some.host.tld database: name: xy123mybranchname_mysql docker: name: phbackendxy123mybranchname_web_1 projectFolder: phbackend--xy-123-my-branch-name vhost: phbackend-xy123mybranchname.some.host.tld inheritsFrom: http://some.host/data.yaml Note You can create new configurations via the global blueprints -settings: blueprints: - configName: mbb variants: - de - en - it - fr will create 4 new configurations using the blueprint-config mbb . list phab list This command will list all available tasks. You can get specific help for a task with the next command: help phab help: task Will display all available arguments and options for that given task and some explanatory text. list:hosts phab list:hosts This task will list all your hosts defined in your hosts -section of your fabfile.yaml . list:blueprints Phab list:blueprints This command will list all found blueprint configurations. about phab --config= your-config about will display the configuration of host your-config . output Phab config= your-config --blueprint= your-blueprint-config output This command will print the computed configuration from a blueprint as yams. You can copy it and paste it back to the fabfile to make it permanent. get:property phab --config= your-config get:property name-of-property This will print the property-value to the console. Suitable if you want to use phabalicious from within other scripts. Examples phab --config=mbb get:property host will print the hostname of configuration mbb . phab -cmbb get:property docker.service will print the service of the docker-configuration of mbb . version phab --config= your-config version This command will display the installed version of the code on the installation your-config . Available methods : git . The task will get the installed version via git describe , so if you tag your source properly (.e.g. by using git flow), you'll get a nice version-number. deploy phab --config= your-config deploy phab --config= your-config deploy branch-to-deploy This task will deploy the latest code to the given installation. If the installation-type is not dev or test the backupDB -task is run before the deployment starts. If branch-to-deploy is stated the specific branch gets deployed. After a successfull deployment the reset -task will be run. Available methods: git will deploy to the latest commit for the given branch defined in the host-configuration. Submodules will be synced, and updated. platform will push the current branch to the platform remote, which will start the deployment-process on platform.sh ftp-sync will create a copy of the app in a temporary folder and syncs this folder with the help of lftp with a remote-ftp-server. Examples: phab --config=mbb deploy will deploy the app via the config found in mob phab --config=mbb deploy feature/some-feature will deploy the branch feature/some-feature regardless the setting in the fabfile. reset phab config= your-config reset This task will reset your installation Available methods: composer will run composer install to update any dependencies before doing the reset drush will set the site-uuid from fabfile.yaml (drupal 8) enable a deployment-module if any stated in the fabfile.yaml enable modules listed in file modules_enabled.txt disable modules listed in file modules_disabled.txt revert features (drupal 7) if revertFeatures is true / import the configuration (drupal 8), run update-hooks and does a cache-clear. if your host-type is dev the password gets reset to admin/admin Examples: phab --config=mbb reset will reset the installation and will not reset the password. install phab config= your-config install This task will install a new Drupal installation with the minimal-distribution. You can install different distributions, see the examples. Available methods: drush Configuration: You can add a installOptions -section to your fabfile.yaml. Here's an example: installOptions: distribution: thunder locale: es Examples: phab --config=mbb install will install a new Drupal installation phab --config=mbb install --skip-reset=1 will install a new Drupal installation and will not run the reset-task afterwards. install:from phab --config= your-config install:from source-config what This task will install a new installation (see the install -task) and afterwards will do a copyFrom . The reset -task after the install -task will be skipped and executed after the copyFrom -task. You can limit, what should be copied from: db or files . If what is omitted, then everything is copied from. See also: install copyFrom backup phab --config= your-config backup what This command will backup your files and database into the specified backup -directory. The file-names will include configuration-name, a timestamp and the git-SHA1. Every backup can be referenced by its filename (w/o extension) or, when git is abailable via the git-commit-hash. If what is omitted, files and db gets backupped, you can limit this by providing db and/ or files . Available methods: git will prepend the file-names with a hash of the current revision. files will tar all files in the filesFolder and save it into the backupFolder drush will dump the databases and save it to the backupFolder Configuration: your host-configuration will need a backupFolder and a filesFolder Examples phab -cmbb backup will backup everything phab -cmbb backup files will backup only public and private files. phan -cmbb backup db will backup the database only. list:backups phab --config= your-config list:backups This command will print all available backups to the console. restore phab --config= your-config restore commit-hash|file-name This will restore a backup-set. A backup-set consists typically of a database-dump and a gzipped file-archive. You can a list of candidates via phab --config= config list:backups Available methods git git will checkout the given hash encoded in the filename. files all files will be restored. An existing files-folder will be renamed for safety reasons. drush will import the database-dump. get:backup phab --config: config get:backup commit-hash|file-name This command will copy a remote backup-set to your local computer into the current working-directory. See also: restore backup copy-from phab --config= dest-config copy-from source-config what This task will copy all files via rsync from source-config to dest-config and will dump the database from source-config and restore it to dest-config when what is omitted. After that the reset -task gets executed. This is the ideal task to copy a complete installation from one host to another. You can limit what to copy by adding db or files as arguments. Available methods ssh will create all necessary tunnels to access the hosts. files will rsync all new and changed files from source to dest drush will dump the database and restore it on the dest-host. Examples phab -cmbb copy-from remote-host will copy db and files from remote-host to mbb phab -cmbb copy-from remote-host db will copy only the db from remote-host to mbb phab -cmbb copy-from remote-host will copy only the files from remote-host to mbb drush phab --config= config drush drush-command This task will execute the drush-command on the remote host specified in . Please note, that you'll have to quote the drush-command when it contains spaces. Available methods Only available for the drush -method Examples phab --config=staging drush \"cc all -y\" phab --config=local drush fra drupal This task will execute a drupal-console task on the remote host. Please note, that you'll have to quote the command when it contains spaces. Available methods Only available for the drupal -method Examples phab --config=local drupal cache:rebuild phab --config=local drupal \"generate:module --module helloworld\" platform phab --config= config platform command Runs a specific platform-command. get:file phab --config= config get:file path-to-remote-file Copy a remote file to the current working directory of your current machine. put:file phab --config= config put:file path-to-local-file Copy a local file to the tmp-folder of a remote machine. Configuration this command will use the tmpFolder -host-setting for the destination directory. get:files-dump phab --config= config get:files-dump This task will tar all files in filesFolder and privateFilesFolder and download it to the local computer. Available methods currently only implemented for the files -method get:sql-dump phab --config= config get:sql-dump Get a current dump of the remote database and copy it to the local machine into the current working directory. Available methods currently only implemented for the drush -method restore:sql-from-file phab --config= config restore:sql-from-file path-to-local-sql-dump This command will copy the dump-file path-to-local-sql-dump to the remote machine and import it into the database. Available methods currently only implemented for the drush -method script phab --config= config script script-name This command will run custom scripts on a remote machine. You can declare scripts globally or per host. If the script-name can't be found in the fabfile.yaml you'll get a list of all available scripts. Additional arguments get passed to the script. See the examples. Examples phab --config=mbb script . List all available scripts for configuration mbb phab --config=mbb script behat Run the behat -script phab --config=mbb script behat \"--name=\"Login feature\" --format=pretty\" Run the behat-test, apply --name and --format parameters to the script The script -command is rather powerful, have a read about it in the extra section. docker phab --config= config docker docker-task The docker command is suitable for orchestrating and administering remote instances of docker-containers. The basic setup is that your host-configuration has a docker -section, which contains a configuration -key. The dockerHosts -section of your fabfile.yaml has a list of tasks which are executed on the \"parent-host\" of the configuration. Please have a look at the docker-section for more information. Most of the time the docker-container do not have a public or known ip-address. phabalicious tries to find out the ip-address of a given instance and use that for communicating with its services. There are three implicit tasks available: copySSHKeys phab --config=mbb docker copySSHKeys This will copy the ssh-keys into the docker-instance. You'll need to provide the paths to the files via the three configurations: dockerKeyFile , the path to the private ssh-key to use. dockerAuthorizedKeyFile , the path to the file for authoried_keys or a url. dockerKnownHostsFile , the path to the file for known_hosts dockerNetRcFile , the path to a .netrc -file to copy into the container. This is helpful if you are using https-repositories and want to authenticate against them. As docker-container do not have any state, this task is used to copy any necessary ssh-configuration into the docker-container, so communication per ssh does not need any passwords. waitForServices This task will try to run supervisorctl status in the container and waits until all services are running. This is useful in scripts to wait for any services that need some time to start up. Obviously this task depends on supervisorctl . start-remote-access phab --config= config start-remote-access phab --config= config start-remote-access --port= port --public-port= public-port --public-ip= public-ip This task will run a command to forward a local port to a remote port. It starts a new ssh-session which will do the forwarding. When finished, type exit . Examples phab --config=mbb start-remote-access will forward localhost:8888 to port 80 of the docker-container phab --config=mbb start-remote-access --port=3306 --publicPort=33060 will forward localhost:33060 to port 3306 notify phab --config= config notify message channel This command will send the notification to Mattermosts channel . For a detailed description have a look into the dedicated documentation. Examples * phab config:mbb notify \"hello world\" \"off-topic\": sends hello world to #off-topic` app:scaffold phab app:scaffold path/url-to-scaffold-files --name= name of app --short-name= short name of app --output= path to output --override= 1|0 This command will scaffold a new project from a set of scaffold-files. See the dedicated documentation for how to create these files. Examples phab app:scaffold path/to/scaffold.yml will scaffold the app in the current folder. Phab will ask for the name and the short-name phab app:scaffold path/to/scaffold.yml --name=\"Hello World\" --short-name=\"HW\" will scaffold the app with name \"Hello World and short-name \"HW\" * phab app:scaffold https://config.factorial.io/scaffold/drupal/d8.yml will scaffold a Drupal app from the remote configuration. app:create phab --config= config app:create --config-from= other-config This command will create a new app instance from a given config. Most useful with the usage of blueprints. The creation is done in several steps which can be customized. If you apply the --config-from -option an additional copyFrom is done afterwards. For a deeper explanation please have a look into the dedicated documentation app:update phab --config= config app:update This command will update the code-base to the latest changes. When using the crush-method, drupal core will be updated to the latest version, if using composer then composer will be used to update the existing code. Available methods drush will update Drupal-core, but only if composer is not used composer will update the codebase by running composer update app:destroy phab --config= config app:destroy This command will destroy an app from a given configuration. The process has several steps. Caution: there will be no backup! self-update phab self-update Phan self-update --allow-unstable=1 This will download the latest version of phab and replace the current installed one with the downloaded version. If allow-unstable is set, the latest-dev-version will be downloaded. jira phab jira This command will display your open tasks for that given project. For this to work, the command needs some configuration-options.","title":"Available tasks"},{"location":"available-tasks/#-v-vv-vvv-vvvv","text":"Setting this option will increase the verbosity of phabalicious. Without this settings you'll get only warnings and errors and some informational stuff. If you encounter a problem try increasing the verbosity-level.","title":"-v/ -vv/ -vvv/ -vvvv"},{"location":"available-tasks/#-config","text":"phab --config= your-config Most of the phabalicious tasks need the option config . Setting the option will lookup your-config in the hosts -section of your fabfile.yaml and the data will be used to run your task with the correct environment.","title":"--config"},{"location":"available-tasks/#-offline","text":"phab --offline=1 --config= your-config task This task will disable remote configuration files. As phabalicious keeps copies of remote configuration-files in ~/.phabalicious it will try to load the configuration-file from there.","title":"--offline"},{"location":"available-tasks/#-fabfile","text":"Phab --fabfile= path-to-your-fabfile ... This will try to load the fabfile.yaml from a different location: path-to-your-fabfile","title":"--fabfile"},{"location":"available-tasks/#-blueprint","text":"phab --config= your-config --blueprint= branch-name task blueprint will try to load a blueprint-template from the fabfile.yaml and apply the input given as branch-name to the template. This is helpful if you want to create/ use a new configuration which has some dynamic parts like the name of the database, the name of the docker-container, etc. The task will look first in the host-config for the property blueprint , afterwards in the dockerHost-configuration config-name and eventually in the global namespace. If you want to print the generated configuration as yaml, then use the output -command. The computed configuration is used as the current configuration, that means, you can run other tasks against the generated configuration. Available replacement-patterns and what they do. Input is feature/XY-123-my_Branch-name , the project-name is Example project Replacement Pattern value %slug.with-hyphens.without-feature% xy-123-my-branch-name %slug.with-hyphens% feature-xy-123-my-branch-name %project-slug.with-hypens% example-project %slug% featurexy123mybranchname %project-slug% exampleproject %project-identifier% Example project %identifier% feature/XY-123-my_Branch-name %slug.without-feature% xy123mybranchname Here's an example blueprint: blueprint: inheritsFrom: http://some.host/data.yaml configName: '%project-slug%-%slug.with-hyphens.without-feature%.some.host.tld' branch: '%identifier%' database: name: '%slug.without-feature%_mysql' docker: projectFolder: '%project-slug%--%slug.with-hyphens.without-feature%' vhost: '%project-slug%-%slug.without-feature%.some.host.tld' name: '%project-slug%%slug.without-feature%_web_1' And the output of phab blueprint:feature/XY-123-my_Branch-name,configNamy= config-name ,output=true is hosts: phbackend-xy-123-my-branch-name.some.host.tld: branch: feature/XY-123-my_Branch-name configName: phbackend-xy-123-my-branch-name.some.host.tld database: name: xy123mybranchname_mysql docker: name: phbackendxy123mybranchname_web_1 projectFolder: phbackend--xy-123-my-branch-name vhost: phbackend-xy123mybranchname.some.host.tld inheritsFrom: http://some.host/data.yaml Note You can create new configurations via the global blueprints -settings: blueprints: - configName: mbb variants: - de - en - it - fr will create 4 new configurations using the blueprint-config mbb .","title":"--blueprint"},{"location":"available-tasks/#list","text":"phab list This command will list all available tasks. You can get specific help for a task with the next command:","title":"list"},{"location":"available-tasks/#help","text":"phab help: task Will display all available arguments and options for that given task and some explanatory text.","title":"help"},{"location":"available-tasks/#listhosts","text":"phab list:hosts This task will list all your hosts defined in your hosts -section of your fabfile.yaml .","title":"list:hosts"},{"location":"available-tasks/#listblueprints","text":"Phab list:blueprints This command will list all found blueprint configurations.","title":"list:blueprints"},{"location":"available-tasks/#about","text":"phab --config= your-config about will display the configuration of host your-config .","title":"about"},{"location":"available-tasks/#output","text":"Phab config= your-config --blueprint= your-blueprint-config output This command will print the computed configuration from a blueprint as yams. You can copy it and paste it back to the fabfile to make it permanent.","title":"output"},{"location":"available-tasks/#getproperty","text":"phab --config= your-config get:property name-of-property This will print the property-value to the console. Suitable if you want to use phabalicious from within other scripts. Examples phab --config=mbb get:property host will print the hostname of configuration mbb . phab -cmbb get:property docker.service will print the service of the docker-configuration of mbb .","title":"get:property"},{"location":"available-tasks/#version","text":"phab --config= your-config version This command will display the installed version of the code on the installation your-config . Available methods : git . The task will get the installed version via git describe , so if you tag your source properly (.e.g. by using git flow), you'll get a nice version-number.","title":"version"},{"location":"available-tasks/#deploy","text":"phab --config= your-config deploy phab --config= your-config deploy branch-to-deploy This task will deploy the latest code to the given installation. If the installation-type is not dev or test the backupDB -task is run before the deployment starts. If branch-to-deploy is stated the specific branch gets deployed. After a successfull deployment the reset -task will be run. Available methods: git will deploy to the latest commit for the given branch defined in the host-configuration. Submodules will be synced, and updated. platform will push the current branch to the platform remote, which will start the deployment-process on platform.sh ftp-sync will create a copy of the app in a temporary folder and syncs this folder with the help of lftp with a remote-ftp-server. Examples: phab --config=mbb deploy will deploy the app via the config found in mob phab --config=mbb deploy feature/some-feature will deploy the branch feature/some-feature regardless the setting in the fabfile.","title":"deploy"},{"location":"available-tasks/#reset","text":"phab config= your-config reset This task will reset your installation Available methods: composer will run composer install to update any dependencies before doing the reset drush will set the site-uuid from fabfile.yaml (drupal 8) enable a deployment-module if any stated in the fabfile.yaml enable modules listed in file modules_enabled.txt disable modules listed in file modules_disabled.txt revert features (drupal 7) if revertFeatures is true / import the configuration (drupal 8), run update-hooks and does a cache-clear. if your host-type is dev the password gets reset to admin/admin Examples: phab --config=mbb reset will reset the installation and will not reset the password.","title":"reset"},{"location":"available-tasks/#install","text":"phab config= your-config install This task will install a new Drupal installation with the minimal-distribution. You can install different distributions, see the examples. Available methods: drush Configuration: You can add a installOptions -section to your fabfile.yaml. Here's an example: installOptions: distribution: thunder locale: es Examples: phab --config=mbb install will install a new Drupal installation phab --config=mbb install --skip-reset=1 will install a new Drupal installation and will not run the reset-task afterwards.","title":"install"},{"location":"available-tasks/#installfrom","text":"phab --config= your-config install:from source-config what This task will install a new installation (see the install -task) and afterwards will do a copyFrom . The reset -task after the install -task will be skipped and executed after the copyFrom -task. You can limit, what should be copied from: db or files . If what is omitted, then everything is copied from. See also: install copyFrom","title":"install:from"},{"location":"available-tasks/#backup","text":"phab --config= your-config backup what This command will backup your files and database into the specified backup -directory. The file-names will include configuration-name, a timestamp and the git-SHA1. Every backup can be referenced by its filename (w/o extension) or, when git is abailable via the git-commit-hash. If what is omitted, files and db gets backupped, you can limit this by providing db and/ or files . Available methods: git will prepend the file-names with a hash of the current revision. files will tar all files in the filesFolder and save it into the backupFolder drush will dump the databases and save it to the backupFolder Configuration: your host-configuration will need a backupFolder and a filesFolder Examples phab -cmbb backup will backup everything phab -cmbb backup files will backup only public and private files. phan -cmbb backup db will backup the database only.","title":"backup"},{"location":"available-tasks/#listbackups","text":"phab --config= your-config list:backups This command will print all available backups to the console.","title":"list:backups"},{"location":"available-tasks/#restore","text":"phab --config= your-config restore commit-hash|file-name This will restore a backup-set. A backup-set consists typically of a database-dump and a gzipped file-archive. You can a list of candidates via phab --config= config list:backups Available methods git git will checkout the given hash encoded in the filename. files all files will be restored. An existing files-folder will be renamed for safety reasons. drush will import the database-dump.","title":"restore"},{"location":"available-tasks/#getbackup","text":"phab --config: config get:backup commit-hash|file-name This command will copy a remote backup-set to your local computer into the current working-directory. See also: restore backup","title":"get:backup"},{"location":"available-tasks/#copy-from","text":"phab --config= dest-config copy-from source-config what This task will copy all files via rsync from source-config to dest-config and will dump the database from source-config and restore it to dest-config when what is omitted. After that the reset -task gets executed. This is the ideal task to copy a complete installation from one host to another. You can limit what to copy by adding db or files as arguments. Available methods ssh will create all necessary tunnels to access the hosts. files will rsync all new and changed files from source to dest drush will dump the database and restore it on the dest-host. Examples phab -cmbb copy-from remote-host will copy db and files from remote-host to mbb phab -cmbb copy-from remote-host db will copy only the db from remote-host to mbb phab -cmbb copy-from remote-host will copy only the files from remote-host to mbb","title":"copy-from"},{"location":"available-tasks/#drush","text":"phab --config= config drush drush-command This task will execute the drush-command on the remote host specified in . Please note, that you'll have to quote the drush-command when it contains spaces. Available methods Only available for the drush -method Examples phab --config=staging drush \"cc all -y\" phab --config=local drush fra","title":"drush"},{"location":"available-tasks/#drupal","text":"This task will execute a drupal-console task on the remote host. Please note, that you'll have to quote the command when it contains spaces. Available methods Only available for the drupal -method Examples phab --config=local drupal cache:rebuild phab --config=local drupal \"generate:module --module helloworld\"","title":"drupal"},{"location":"available-tasks/#platform","text":"phab --config= config platform command Runs a specific platform-command.","title":"platform"},{"location":"available-tasks/#getfile","text":"phab --config= config get:file path-to-remote-file Copy a remote file to the current working directory of your current machine.","title":"get:file"},{"location":"available-tasks/#putfile","text":"phab --config= config put:file path-to-local-file Copy a local file to the tmp-folder of a remote machine. Configuration this command will use the tmpFolder -host-setting for the destination directory.","title":"put:file"},{"location":"available-tasks/#getfiles-dump","text":"phab --config= config get:files-dump This task will tar all files in filesFolder and privateFilesFolder and download it to the local computer. Available methods currently only implemented for the files -method","title":"get:files-dump"},{"location":"available-tasks/#getsql-dump","text":"phab --config= config get:sql-dump Get a current dump of the remote database and copy it to the local machine into the current working directory. Available methods currently only implemented for the drush -method","title":"get:sql-dump"},{"location":"available-tasks/#restoresql-from-file","text":"phab --config= config restore:sql-from-file path-to-local-sql-dump This command will copy the dump-file path-to-local-sql-dump to the remote machine and import it into the database. Available methods currently only implemented for the drush -method","title":"restore:sql-from-file"},{"location":"available-tasks/#script","text":"phab --config= config script script-name This command will run custom scripts on a remote machine. You can declare scripts globally or per host. If the script-name can't be found in the fabfile.yaml you'll get a list of all available scripts. Additional arguments get passed to the script. See the examples. Examples phab --config=mbb script . List all available scripts for configuration mbb phab --config=mbb script behat Run the behat -script phab --config=mbb script behat \"--name=\"Login feature\" --format=pretty\" Run the behat-test, apply --name and --format parameters to the script The script -command is rather powerful, have a read about it in the extra section.","title":"script"},{"location":"available-tasks/#docker","text":"phab --config= config docker docker-task The docker command is suitable for orchestrating and administering remote instances of docker-containers. The basic setup is that your host-configuration has a docker -section, which contains a configuration -key. The dockerHosts -section of your fabfile.yaml has a list of tasks which are executed on the \"parent-host\" of the configuration. Please have a look at the docker-section for more information. Most of the time the docker-container do not have a public or known ip-address. phabalicious tries to find out the ip-address of a given instance and use that for communicating with its services. There are three implicit tasks available:","title":"docker"},{"location":"available-tasks/#copysshkeys","text":"phab --config=mbb docker copySSHKeys This will copy the ssh-keys into the docker-instance. You'll need to provide the paths to the files via the three configurations: dockerKeyFile , the path to the private ssh-key to use. dockerAuthorizedKeyFile , the path to the file for authoried_keys or a url. dockerKnownHostsFile , the path to the file for known_hosts dockerNetRcFile , the path to a .netrc -file to copy into the container. This is helpful if you are using https-repositories and want to authenticate against them. As docker-container do not have any state, this task is used to copy any necessary ssh-configuration into the docker-container, so communication per ssh does not need any passwords.","title":"copySSHKeys"},{"location":"available-tasks/#waitforservices","text":"This task will try to run supervisorctl status in the container and waits until all services are running. This is useful in scripts to wait for any services that need some time to start up. Obviously this task depends on supervisorctl .","title":"waitForServices"},{"location":"available-tasks/#start-remote-access","text":"phab --config= config start-remote-access phab --config= config start-remote-access --port= port --public-port= public-port --public-ip= public-ip This task will run a command to forward a local port to a remote port. It starts a new ssh-session which will do the forwarding. When finished, type exit . Examples phab --config=mbb start-remote-access will forward localhost:8888 to port 80 of the docker-container phab --config=mbb start-remote-access --port=3306 --publicPort=33060 will forward localhost:33060 to port 3306","title":"start-remote-access"},{"location":"available-tasks/#notify","text":"phab --config= config notify message channel This command will send the notification to Mattermosts channel . For a detailed description have a look into the dedicated documentation. Examples * phab config:mbb notify \"hello world\" \"off-topic\": sends hello world to #off-topic`","title":"notify"},{"location":"available-tasks/#appscaffold","text":"phab app:scaffold path/url-to-scaffold-files --name= name of app --short-name= short name of app --output= path to output --override= 1|0 This command will scaffold a new project from a set of scaffold-files. See the dedicated documentation for how to create these files. Examples phab app:scaffold path/to/scaffold.yml will scaffold the app in the current folder. Phab will ask for the name and the short-name phab app:scaffold path/to/scaffold.yml --name=\"Hello World\" --short-name=\"HW\" will scaffold the app with name \"Hello World and short-name \"HW\" * phab app:scaffold https://config.factorial.io/scaffold/drupal/d8.yml will scaffold a Drupal app from the remote configuration.","title":"app:scaffold"},{"location":"available-tasks/#appcreate","text":"phab --config= config app:create --config-from= other-config This command will create a new app instance from a given config. Most useful with the usage of blueprints. The creation is done in several steps which can be customized. If you apply the --config-from -option an additional copyFrom is done afterwards. For a deeper explanation please have a look into the dedicated documentation","title":"app:create"},{"location":"available-tasks/#appupdate","text":"phab --config= config app:update This command will update the code-base to the latest changes. When using the crush-method, drupal core will be updated to the latest version, if using composer then composer will be used to update the existing code. Available methods drush will update Drupal-core, but only if composer is not used composer will update the codebase by running composer update","title":"app:update"},{"location":"available-tasks/#appdestroy","text":"phab --config= config app:destroy This command will destroy an app from a given configuration. The process has several steps. Caution: there will be no backup!","title":"app:destroy"},{"location":"available-tasks/#self-update","text":"phab self-update Phan self-update --allow-unstable=1 This will download the latest version of phab and replace the current installed one with the downloaded version. If allow-unstable is set, the latest-dev-version will be downloaded.","title":"self-update"},{"location":"available-tasks/#jira","text":"phab jira This command will display your open tasks for that given project. For this to work, the command needs some configuration-options.","title":"jira"},{"location":"configuration/","text":"Structure of the configuration file Overview The configuration is fetched from the file fabfile.yaml and should have the following structure: name: the project name needs: - list of methods requires: 2.0 dockerHosts: docker1: ... hosts: host1: ... Here's the documentation of the supported and used keys: name The name of the project, it's only used for output. needs List here all needed methods for that type of project. Available methods are: local runs all commands for that configuration locally. git for deployments via git ssh drush for support of drupal installations files mattermost for slack-notifications docker for docker-support composer for composer support drupalconsole for drupal-concole support platform for deploying to platform.sh ftp-sync to deploy to a ftp-server Example for drupal 7 needs: - ssh - git - drush - files Example for drupal 8 composer based and dockerized needs: - ssh - git - drush - composer - docker - files requires The file-format of phabalicious changed over time. Set this to the lowest version of phabalicious which can handle the file. Should bei 2.0 hosts Hosts is a list of host-definitions which contain all needed data to connect to a remote host. Here's an example hosts: exampleHost: host: example.host.tld user: example_user port: 2233 type: dev rootFolder: /var/www/public gitRootFolder: /var/www siteFolder: /sites/default filesFolder: /sites/default/files backupFolder: /var/www/backups supportsInstalls: true|false supportsCopyFrom: true|false type: dev branch: develop docker: ... database: ... scripts: ... sshTunnel: .. You can get all host-information including the default values using the phabalicious command about : phab --config=staging about This will print all host configuration for the host staging . General keys type defines the type of installation. Currently there are four types available: dev for dev-installations, they won't backup the databases on deployment test for test-installations, similar than dev , no backups on deployments stage for staging-installations. prod for live-installations. Some tasks can not be run on live-installations as install or as a target for copyFrom The main use-case is to run different scripts per type, see the common -section. rootFolder the web-root-folder of the installation, typically exposed to the public. needs a list of needed methods, if not set, the globally set needs gets used. configName is set by phabalicious, it's the name of the configuration supportsInstalls , default is true for types != prod . If sent to true you can run the install -task supportsCopyFrom , default is true. If set to true, you can use that configuration as a source for the copy-from -task. backupBeforeDeploy is set to true for types stage and prod , if set to true, a backup of the DB is made before a deployment. tmpFolder , default is /tmp . shellProvider defines how to run a shell, where commands are executed, current values are local : all commands are run locally ssh : all commands are run via a ssh-shell docker-exec all commands are run via docker-exec. Configuration for the local-method shellProvider default is local , see above. shellExecutable default is /bin/bash The executable for running a shell. Please note, that phabalicious requires a sh-compatible shell. shellProviderExecutable , the command, which will create the process for a shell, here /bin/bash Configuration for the ssh-method host , user , port are used to connect via SSH to the remote machine. Please make sure SSH key forwarding is enabled on your installation. disableKnownHosts , default is false, set to true to ignore the known_hosts-file. sshTunnel phabalicious supports SSH-Tunnels, that means it can log in into another machine and forward the access to the real host. This is handy for dockerized installations, where the ssh-port of the docker-instance is not public. sshTunnel needs the following informations bridgeHost : the host acting as a bridge. bridgeUser : the ssh-user on the bridge-host bridgePort : the port to connect to on the bridge-host localPort : the local port which gets forwarded to the destPort . If localPort is omitted, the ssh-port of the host-configuration is used. If the host-configuration does not have a port-property a random port is used. destHost : the destination host to forward to destHostFromDockerContainer : if set, the docker's Ip address is used for destHost. This is automatically set when using a docker -configuration, see there. destPort : the destination port to forward to shellProviderExecutable , default is /usr/bin/ssh , the executable to establish the connection. Configuration for the git-method gitRootFolder the folder, where the git-repository lies. Defaults to rootFolder branch the name of the branch to use for deployments, they get usually checked out and pulled from origin. ignoreSubmodules default is false, set to false, if you don't want to update a projects' submodule on deploy. gitOptions a keyed list of options to apply to a git command. Currently only pull is supported. If your git-version does not support --rebase you can disable it via an empty array: pull: [] Configuration for the composer-method composerRootFolder the folder where the composer.json for the project is stored, defaults to gitRootFolder . Configuration for the drush-method siteFolder is a drupal-specific folder, where the settings.php resides for the given installation. This allows to interact with multisites etc. filesFolder the path to the files-folder, where user-assets get stored and which should be backed up by the files -method revertFeatures , defaults to True , when set all features will be reverted when running a reset (drush only) configurationManagement , an array of configuration-labels to import on reset , defaults to ['staging'] . You can add command arguments for drush, e.g. ['staging', 'dev --partial'] database the database-credentials the install -tasks uses when installing a new installation. name the database name host the database host user the database user pass the password for the database user prefix the optional table-prefix to use adminUser , default is admin , the name of the admin-user to set when running the reset-task on dev -instances replaceSettingsFile , default is true. If set to false, the settings.php file will not be replaced when running an install. installOptions default is distribution: minimal, locale: en, options: '' . You can change the distribution to install and/ or the locale. drupalVersion set the drupal-version to use. If not set phabalicious is trying to guess it from the needs -configuration. drushVersion set the used crush-version, default is 8 . Drush is not 100% backwards-compatible, for phabalicious needs to know its version. supportsZippedBackups default is true, set to false, when zipped backups are not supported Configuration of the ftp-sync-method ftp keeps all configuration bundled: user the ftp-user password the ftp password host the ftp host port , default is 21, the port to connect to rootFolder the folder to copy the app into on the ftp-host. lftpOptions , an array of options to pass when executing lftp Configuration of the docker-method docker for all docker-relevant configuration. configuration and name / service are the only required keys, all other are optional and used by the docker-tasks. configuration should contain the key of the dockerHost-configuration in dockerHosts name contains the name of the docker-container. This is needed to get the IP-address of the particular docker-container when using ssh-tunnels (see above). for docker-compose-base setups you can provide the service instead the name, phabalicious will get the docker name automatically from the service. dockerHosts dockerHosts is similar structured as the hosts -entry. It's a keyed lists of hosts containing all necessary information to create a ssh-connection to the host, controlling the docker-instances, and a list of tasks, the user might call via the docker -command. See the docker -entry for a more birds-eye-view of the concepts. Here's an example dockerHosts -entry: dockerHosts: mbb: runLocally: false host: multibasebox.dev user: vagrant password: vagrant port: 22 rootFolder: /vagrant environment: VHOST: %host.host% WEBROOT: %host.rootFolder% tasks: logs: - docker logs %host.docker.name% Here's a list of all possible entries of a dockerHosts-entry: shellProvider , the shell-provider to use, currently local or ssh . runLocally : if set to true, the local -shell-provider will be used. host , user and port : when using the ssh -shell-provicer. environment a keyed list of environment-variables to set, when running one of the tasks. The replacement-patterns of scripts are supported, see there for more information. * tasks a keyed list of commands to run for a given docker-subtask (similar to scripts ). Note: these commands are running on the docker-host, not on the host. All replacement-patterns do work, and you can call even other tasks via execute( task , subtask ) e.g. execute(docker, stop) See the scripts -section for more info. You can use inheritsFrom to base your configuration on an existing one. You can add any configuration you may need and reference to that information from within your tasks via the replacement-pattern %dockerHost.keyName% e.g. %dockerHost.host% . You can reference a specific docker-host-configuration from your host-configuration via hosts: test: docker: configuration: mbb common common contains a list of commands, keyed by task and type which gets executed when the task is executed. Example: common: reset: dev: - echo running reset on a dev-instance stage: - echo running reset on a stage-instance prod: - echo running reset on a prod-instance deployPrepare: dev: - echo preparing deploy on a dev instance deploy: dev: - echo deploying on a dev instance deployFinished: dev: - echo finished deployment on a dev instance The first key is the task-name ( reset , deploy , ...), the second key is the type of the installation ( dev , stage , prod , test ). Every task is prepended by a prepare-stage and appended by a finished-stage, so you can call scripts before and after an actual task. You can even run other scripts via the execute -command, see the scripts -section. scripts A keyed list of available scripts. This scripts may be defined globally (on the root level) or on a per host-level. The key is the name of the script and can be executed via phab --config= configuration script key A script consists of an array of commands which gets executed sequentially. An example: scripts: test: - echo Running script test test2: - echo Running script test2 on %host.config_name% - execute(script, test) Scripts can be defined on a global level, but also on a per host-level. You can declare default-values for arguments via a slightly modified syntax: scripts: defaultArgumentTest: defaults: name: Bob script: - echo Hello %arguments.name% Running the script via phab config:mbb script:defaultArgumentTest,name=\"Julia\" will show Hello Julia . Running phab config:mbb script:defaultArgumentTest will show Hello Bob . For more information see the main scripts section below. jira The jira-command needs some configuration. It is advised to store this configuration in your user folder ( ~/.fabfile.local.yaml ) or somewhere upstream of your project folder, as it might contain sensitive information. jira: host: jira-host user: jira-user pass: jira-password The command will use the global key as project-key, you can override that via the following configuration: jira: projectKey: jira project-key other deploymentModule name of the deployment-module the drush-method enables when doing a deploy sqlSkipTables a list of table-names drush should omit when doing a backup. configurationManagement a list of configuration-labels to import on reset . This defaults to ['staging'] and may be overridden on a per-host basis. You can add command arguments to the the configuration label. Example: deploymentModule: my_deployment_module usePty: false useShell: false gitOptions: pull: - --rebase - --quiet sqlSkipTables: - cache - watchdog - session configurationManagement: staging: - drush config-import -y staging dev: - Drusch config-import -y dev --partial Inheritance Sometimes it make sense to extend an existing configuration or to include configuration from other places from the file-system or from remote locations. There's a special key inheritsFrom which will include the yaml found at the location and merge it with the data. This is supported for entries in hosts and dockerHosts and for the fabfile itself. If a host , a dockerHost or the fabfile itself has the key inheritsFrom , then the given key is used as a base-configuration. Here's a simple example: hosts: default: port: 22 host: localhost user: default example1: inheritsFrom: default port: 23 example2: inheritsFrom: example1 user: example2 example1 will store the merged configuration from default with the configuration of example1 . example2 is a merge of all three configurations: example2 with example1 with default . hosts: example1: port: 23 host: localhost user: default example2: port: 23 host: localhost user: example2 You can even reference external files to inherit from: hosts: fileExample: inheritsFrom: ./path/to/config/file.yaml httpExapme: inheritsFrom: http://my.tld/path/to/config_file.yaml This mechanism works also for the fabfile.yaml / index.yaml itself, and is not limited to one entry: name: test fabfile inheritsFrom: - ./mbb.yaml - ./drupal.yaml","title":"Structure of the configuration file"},{"location":"configuration/#structure-of-the-configuration-file","text":"","title":"Structure of the configuration file"},{"location":"configuration/#overview","text":"The configuration is fetched from the file fabfile.yaml and should have the following structure: name: the project name needs: - list of methods requires: 2.0 dockerHosts: docker1: ... hosts: host1: ... Here's the documentation of the supported and used keys:","title":"Overview"},{"location":"configuration/#name","text":"The name of the project, it's only used for output.","title":"name"},{"location":"configuration/#needs","text":"List here all needed methods for that type of project. Available methods are: local runs all commands for that configuration locally. git for deployments via git ssh drush for support of drupal installations files mattermost for slack-notifications docker for docker-support composer for composer support drupalconsole for drupal-concole support platform for deploying to platform.sh ftp-sync to deploy to a ftp-server Example for drupal 7 needs: - ssh - git - drush - files Example for drupal 8 composer based and dockerized needs: - ssh - git - drush - composer - docker - files","title":"needs"},{"location":"configuration/#requires","text":"The file-format of phabalicious changed over time. Set this to the lowest version of phabalicious which can handle the file. Should bei 2.0","title":"requires"},{"location":"configuration/#hosts","text":"Hosts is a list of host-definitions which contain all needed data to connect to a remote host. Here's an example hosts: exampleHost: host: example.host.tld user: example_user port: 2233 type: dev rootFolder: /var/www/public gitRootFolder: /var/www siteFolder: /sites/default filesFolder: /sites/default/files backupFolder: /var/www/backups supportsInstalls: true|false supportsCopyFrom: true|false type: dev branch: develop docker: ... database: ... scripts: ... sshTunnel: .. You can get all host-information including the default values using the phabalicious command about : phab --config=staging about This will print all host configuration for the host staging .","title":"hosts"},{"location":"configuration/#general-keys","text":"type defines the type of installation. Currently there are four types available: dev for dev-installations, they won't backup the databases on deployment test for test-installations, similar than dev , no backups on deployments stage for staging-installations. prod for live-installations. Some tasks can not be run on live-installations as install or as a target for copyFrom The main use-case is to run different scripts per type, see the common -section. rootFolder the web-root-folder of the installation, typically exposed to the public. needs a list of needed methods, if not set, the globally set needs gets used. configName is set by phabalicious, it's the name of the configuration supportsInstalls , default is true for types != prod . If sent to true you can run the install -task supportsCopyFrom , default is true. If set to true, you can use that configuration as a source for the copy-from -task. backupBeforeDeploy is set to true for types stage and prod , if set to true, a backup of the DB is made before a deployment. tmpFolder , default is /tmp . shellProvider defines how to run a shell, where commands are executed, current values are local : all commands are run locally ssh : all commands are run via a ssh-shell docker-exec all commands are run via docker-exec.","title":"General keys"},{"location":"configuration/#configuration-for-the-local-method","text":"shellProvider default is local , see above. shellExecutable default is /bin/bash The executable for running a shell. Please note, that phabalicious requires a sh-compatible shell. shellProviderExecutable , the command, which will create the process for a shell, here /bin/bash","title":"Configuration for the local-method"},{"location":"configuration/#configuration-for-the-ssh-method","text":"host , user , port are used to connect via SSH to the remote machine. Please make sure SSH key forwarding is enabled on your installation. disableKnownHosts , default is false, set to true to ignore the known_hosts-file. sshTunnel phabalicious supports SSH-Tunnels, that means it can log in into another machine and forward the access to the real host. This is handy for dockerized installations, where the ssh-port of the docker-instance is not public. sshTunnel needs the following informations bridgeHost : the host acting as a bridge. bridgeUser : the ssh-user on the bridge-host bridgePort : the port to connect to on the bridge-host localPort : the local port which gets forwarded to the destPort . If localPort is omitted, the ssh-port of the host-configuration is used. If the host-configuration does not have a port-property a random port is used. destHost : the destination host to forward to destHostFromDockerContainer : if set, the docker's Ip address is used for destHost. This is automatically set when using a docker -configuration, see there. destPort : the destination port to forward to shellProviderExecutable , default is /usr/bin/ssh , the executable to establish the connection.","title":"Configuration for the ssh-method"},{"location":"configuration/#configuration-for-the-git-method","text":"gitRootFolder the folder, where the git-repository lies. Defaults to rootFolder branch the name of the branch to use for deployments, they get usually checked out and pulled from origin. ignoreSubmodules default is false, set to false, if you don't want to update a projects' submodule on deploy. gitOptions a keyed list of options to apply to a git command. Currently only pull is supported. If your git-version does not support --rebase you can disable it via an empty array: pull: []","title":"Configuration for the git-method"},{"location":"configuration/#configuration-for-the-composer-method","text":"composerRootFolder the folder where the composer.json for the project is stored, defaults to gitRootFolder .","title":"Configuration for the composer-method"},{"location":"configuration/#configuration-for-the-drush-method","text":"siteFolder is a drupal-specific folder, where the settings.php resides for the given installation. This allows to interact with multisites etc. filesFolder the path to the files-folder, where user-assets get stored and which should be backed up by the files -method revertFeatures , defaults to True , when set all features will be reverted when running a reset (drush only) configurationManagement , an array of configuration-labels to import on reset , defaults to ['staging'] . You can add command arguments for drush, e.g. ['staging', 'dev --partial'] database the database-credentials the install -tasks uses when installing a new installation. name the database name host the database host user the database user pass the password for the database user prefix the optional table-prefix to use adminUser , default is admin , the name of the admin-user to set when running the reset-task on dev -instances replaceSettingsFile , default is true. If set to false, the settings.php file will not be replaced when running an install. installOptions default is distribution: minimal, locale: en, options: '' . You can change the distribution to install and/ or the locale. drupalVersion set the drupal-version to use. If not set phabalicious is trying to guess it from the needs -configuration. drushVersion set the used crush-version, default is 8 . Drush is not 100% backwards-compatible, for phabalicious needs to know its version. supportsZippedBackups default is true, set to false, when zipped backups are not supported","title":"Configuration for the drush-method"},{"location":"configuration/#configuration-of-the-ftp-sync-method","text":"ftp keeps all configuration bundled: user the ftp-user password the ftp password host the ftp host port , default is 21, the port to connect to rootFolder the folder to copy the app into on the ftp-host. lftpOptions , an array of options to pass when executing lftp","title":"Configuration of the ftp-sync-method"},{"location":"configuration/#configuration-of-the-docker-method","text":"docker for all docker-relevant configuration. configuration and name / service are the only required keys, all other are optional and used by the docker-tasks. configuration should contain the key of the dockerHost-configuration in dockerHosts name contains the name of the docker-container. This is needed to get the IP-address of the particular docker-container when using ssh-tunnels (see above). for docker-compose-base setups you can provide the service instead the name, phabalicious will get the docker name automatically from the service.","title":"Configuration of the docker-method"},{"location":"configuration/#dockerhosts","text":"dockerHosts is similar structured as the hosts -entry. It's a keyed lists of hosts containing all necessary information to create a ssh-connection to the host, controlling the docker-instances, and a list of tasks, the user might call via the docker -command. See the docker -entry for a more birds-eye-view of the concepts. Here's an example dockerHosts -entry: dockerHosts: mbb: runLocally: false host: multibasebox.dev user: vagrant password: vagrant port: 22 rootFolder: /vagrant environment: VHOST: %host.host% WEBROOT: %host.rootFolder% tasks: logs: - docker logs %host.docker.name% Here's a list of all possible entries of a dockerHosts-entry: shellProvider , the shell-provider to use, currently local or ssh . runLocally : if set to true, the local -shell-provider will be used. host , user and port : when using the ssh -shell-provicer. environment a keyed list of environment-variables to set, when running one of the tasks. The replacement-patterns of scripts are supported, see there for more information. * tasks a keyed list of commands to run for a given docker-subtask (similar to scripts ). Note: these commands are running on the docker-host, not on the host. All replacement-patterns do work, and you can call even other tasks via execute( task , subtask ) e.g. execute(docker, stop) See the scripts -section for more info. You can use inheritsFrom to base your configuration on an existing one. You can add any configuration you may need and reference to that information from within your tasks via the replacement-pattern %dockerHost.keyName% e.g. %dockerHost.host% . You can reference a specific docker-host-configuration from your host-configuration via hosts: test: docker: configuration: mbb","title":"dockerHosts"},{"location":"configuration/#common","text":"common contains a list of commands, keyed by task and type which gets executed when the task is executed. Example: common: reset: dev: - echo running reset on a dev-instance stage: - echo running reset on a stage-instance prod: - echo running reset on a prod-instance deployPrepare: dev: - echo preparing deploy on a dev instance deploy: dev: - echo deploying on a dev instance deployFinished: dev: - echo finished deployment on a dev instance The first key is the task-name ( reset , deploy , ...), the second key is the type of the installation ( dev , stage , prod , test ). Every task is prepended by a prepare-stage and appended by a finished-stage, so you can call scripts before and after an actual task. You can even run other scripts via the execute -command, see the scripts -section.","title":"common"},{"location":"configuration/#scripts","text":"A keyed list of available scripts. This scripts may be defined globally (on the root level) or on a per host-level. The key is the name of the script and can be executed via phab --config= configuration script key A script consists of an array of commands which gets executed sequentially. An example: scripts: test: - echo Running script test test2: - echo Running script test2 on %host.config_name% - execute(script, test) Scripts can be defined on a global level, but also on a per host-level. You can declare default-values for arguments via a slightly modified syntax: scripts: defaultArgumentTest: defaults: name: Bob script: - echo Hello %arguments.name% Running the script via phab config:mbb script:defaultArgumentTest,name=\"Julia\" will show Hello Julia . Running phab config:mbb script:defaultArgumentTest will show Hello Bob . For more information see the main scripts section below.","title":"scripts"},{"location":"configuration/#jira","text":"The jira-command needs some configuration. It is advised to store this configuration in your user folder ( ~/.fabfile.local.yaml ) or somewhere upstream of your project folder, as it might contain sensitive information. jira: host: jira-host user: jira-user pass: jira-password The command will use the global key as project-key, you can override that via the following configuration: jira: projectKey: jira project-key","title":"jira"},{"location":"configuration/#other","text":"deploymentModule name of the deployment-module the drush-method enables when doing a deploy sqlSkipTables a list of table-names drush should omit when doing a backup. configurationManagement a list of configuration-labels to import on reset . This defaults to ['staging'] and may be overridden on a per-host basis. You can add command arguments to the the configuration label. Example: deploymentModule: my_deployment_module usePty: false useShell: false gitOptions: pull: - --rebase - --quiet sqlSkipTables: - cache - watchdog - session configurationManagement: staging: - drush config-import -y staging dev: - Drusch config-import -y dev --partial","title":"other"},{"location":"configuration/#inheritance","text":"Sometimes it make sense to extend an existing configuration or to include configuration from other places from the file-system or from remote locations. There's a special key inheritsFrom which will include the yaml found at the location and merge it with the data. This is supported for entries in hosts and dockerHosts and for the fabfile itself. If a host , a dockerHost or the fabfile itself has the key inheritsFrom , then the given key is used as a base-configuration. Here's a simple example: hosts: default: port: 22 host: localhost user: default example1: inheritsFrom: default port: 23 example2: inheritsFrom: example1 user: example2 example1 will store the merged configuration from default with the configuration of example1 . example2 is a merge of all three configurations: example2 with example1 with default . hosts: example1: port: 23 host: localhost user: default example2: port: 23 host: localhost user: example2 You can even reference external files to inherit from: hosts: fileExample: inheritsFrom: ./path/to/config/file.yaml httpExapme: inheritsFrom: http://my.tld/path/to/config_file.yaml This mechanism works also for the fabfile.yaml / index.yaml itself, and is not limited to one entry: name: test fabfile inheritsFrom: - ./mbb.yaml - ./drupal.yaml","title":"Inheritance"},{"location":"contribute/","text":"Contributing to Phabalicious If you get stuck at any point you can create a ticket on GitHub . Contributing to development It's the usual, fork the repository, create a feature-branch, do your changes and submit a pull-request via Github. If your new feature has test-coverage the better. We are happy for every contribution. Improving documenation The procedure is the same as with contributing code. Tip To edit existing pages, use the Edit on GitHub link on the top right corner of the page. To add a new page to documentation please follow the guideline provided by MKdocs to add new page and link them within the documentation. Note This document is build using MkDocs , Mike and served using GitHub Pages Install MkDocs . Install Mike Clone the repo locally and switch to develop branch. Using Terminal, navigate to /docs folder. Run mike deploy version-number --push Resources Writing your docs in MKdocs","title":"Contributing to Phabalicious"},{"location":"contribute/#contributing-to-phabalicious","text":"If you get stuck at any point you can create a ticket on GitHub .","title":"Contributing to Phabalicious"},{"location":"contribute/#contributing-to-development","text":"It's the usual, fork the repository, create a feature-branch, do your changes and submit a pull-request via Github. If your new feature has test-coverage the better. We are happy for every contribution.","title":"Contributing to development"},{"location":"contribute/#improving-documenation","text":"The procedure is the same as with contributing code. Tip To edit existing pages, use the Edit on GitHub link on the top right corner of the page. To add a new page to documentation please follow the guideline provided by MKdocs to add new page and link them within the documentation. Note This document is build using MkDocs , Mike and served using GitHub Pages Install MkDocs . Install Mike Clone the repo locally and switch to develop branch. Using Terminal, navigate to /docs folder. Run mike deploy version-number --push","title":"Improving documenation"},{"location":"contribute/#resources","text":"Writing your docs in MKdocs","title":"Resources"},{"location":"docker-integration/","text":"Docker integration The docker-integration is quite simple, but very powerful. In a fabfile, there are host-configuration under the key hosts and docker-configs under the key dockerHosts . A host can reference a docker-configuration, multiple hosts can use one docker-config. A docker-configuration A docker configuration must contain these keys: rootFolder the rootFolder, where the projectFolder can be found shellProvider : local or ssh ; in which shell the tasks-commands should be run. The shell-provider might require more information e.g. user , host and port . tasks : a keyed list of scripts to use. The key is the name of the script, which you can trigger via the docker command environment : a key-value list of environment-variables to set before running a docker-command. This helps to modularize docker-compose-files, for example. The tasks can use the pattern-replacement used in other parts of phabalicious to get data from the docker-config or from the host-config into the tasks. Here's a small example: tasks: run: - echo running container %host.docker.name% for config %host.configName% in %dockerHost.rootFolder% If you want to use some host-config, use host. as a prefix, if you want to use sth from the docker-config, use dockerHost. as prefix. the docker-specific host-configuration All docker-configuration is stored inside the docker -group. It has only 2 required keys: configuration this links to a key under dockerHosts projectFolder the folder, where this project is stored in relation to the rootFolder name or service . Some commands need to know with which container you want to interact. Provide the name of the docker-container via the name -property, if you are using docker-compose you can set the service accordingly, then phabalicious will try to compute the docker-name automatically. You can add as many data to the yams file and reference it via the replacement-mechanism described earlier. A simple example: dockerHosts: test: rootFolder: /root/folder shellProvider: local environment: VHOST: %host.configName%.test tasks: run: - echo docker run build: - echo docker build all: - echo current config: %host.configName% - execute(docker, build) - execute(docker, run) hosts: testHostA: ... docker: configuration: test projectFolder: test-host-a name: testhosta This snippet will expose 3 docker-commands for the host testHostA , you can execute them via phab --config=testHostA docker run|build|all The output for phab -ctestHostA docker all will be: current config: testHostA docker build docker run The inheritance mechanism allows you to store the docker-config in a central location and reuse it in your fabfile: dockerHosts: testB: rootFolder: /some/other/folder inheritsFrom: - https://some.host/docker.yml - https://some.host/docker-compose.yml Built-in docker commands There are two commands builtin, because they are hard to implement in a script-only version: waitForServices copySSHKeysToDocker waitForServices This will try to run supervisorctl status every 10 seconds, and wait until all services are up and running. If you want to disable this command, set the executable to false with executables: supervisorctl: false copySSHKeysToDocker This command will copy the referenced files from your local computer into the docker container and set the permissions so ssh can use the copied data. These are the needed global settings in the fabfile: dockerKeyFile will copy the referenced private key and its public key into the container dockerAuthorizedKeyFile , the authorized_keys -file, can be a path to a file or an url dockerKnownHostsFile , the known_hosts -file dockerNetRcFile , will copy a .netrc -file into the container (suitable for authenticating against https repositories) Obviously a ssh-demon should be running inside your docker-container. Predefined docker-tasks Phabalicious is running some predefined docker-tasks if set in the fabfile and when using the commands app:create or app:destroy spinUp : get all needed container running spinDown : stop all app-containers deleteContainer : remove and delete all app container If you want to support this in your configuration, add the tasks to the fabfile and its corresponding commands. Conclusion As you can see, there's not much docker-specific besides the naming. So in theory you can control something else like rancher or maybe even kubectl . All you have is the referencing between a host and a dockerHost and the possibility to run tasks locally or via SSH on a remote instance, and pass data from the host-config or docker-config to your scripts.","title":"Docker integration"},{"location":"docker-integration/#docker-integration","text":"The docker-integration is quite simple, but very powerful. In a fabfile, there are host-configuration under the key hosts and docker-configs under the key dockerHosts . A host can reference a docker-configuration, multiple hosts can use one docker-config.","title":"Docker integration"},{"location":"docker-integration/#a-docker-configuration","text":"A docker configuration must contain these keys: rootFolder the rootFolder, where the projectFolder can be found shellProvider : local or ssh ; in which shell the tasks-commands should be run. The shell-provider might require more information e.g. user , host and port . tasks : a keyed list of scripts to use. The key is the name of the script, which you can trigger via the docker command environment : a key-value list of environment-variables to set before running a docker-command. This helps to modularize docker-compose-files, for example. The tasks can use the pattern-replacement used in other parts of phabalicious to get data from the docker-config or from the host-config into the tasks. Here's a small example: tasks: run: - echo running container %host.docker.name% for config %host.configName% in %dockerHost.rootFolder% If you want to use some host-config, use host. as a prefix, if you want to use sth from the docker-config, use dockerHost. as prefix.","title":"A docker-configuration"},{"location":"docker-integration/#the-docker-specific-host-configuration","text":"All docker-configuration is stored inside the docker -group. It has only 2 required keys: configuration this links to a key under dockerHosts projectFolder the folder, where this project is stored in relation to the rootFolder name or service . Some commands need to know with which container you want to interact. Provide the name of the docker-container via the name -property, if you are using docker-compose you can set the service accordingly, then phabalicious will try to compute the docker-name automatically. You can add as many data to the yams file and reference it via the replacement-mechanism described earlier.","title":"the docker-specific host-configuration"},{"location":"docker-integration/#a-simple-example","text":"dockerHosts: test: rootFolder: /root/folder shellProvider: local environment: VHOST: %host.configName%.test tasks: run: - echo docker run build: - echo docker build all: - echo current config: %host.configName% - execute(docker, build) - execute(docker, run) hosts: testHostA: ... docker: configuration: test projectFolder: test-host-a name: testhosta This snippet will expose 3 docker-commands for the host testHostA , you can execute them via phab --config=testHostA docker run|build|all The output for phab -ctestHostA docker all will be: current config: testHostA docker build docker run The inheritance mechanism allows you to store the docker-config in a central location and reuse it in your fabfile: dockerHosts: testB: rootFolder: /some/other/folder inheritsFrom: - https://some.host/docker.yml - https://some.host/docker-compose.yml","title":"A simple example:"},{"location":"docker-integration/#built-in-docker-commands","text":"There are two commands builtin, because they are hard to implement in a script-only version: waitForServices copySSHKeysToDocker","title":"Built-in docker commands"},{"location":"docker-integration/#waitforservices","text":"This will try to run supervisorctl status every 10 seconds, and wait until all services are up and running. If you want to disable this command, set the executable to false with executables: supervisorctl: false","title":"waitForServices"},{"location":"docker-integration/#copysshkeystodocker","text":"This command will copy the referenced files from your local computer into the docker container and set the permissions so ssh can use the copied data. These are the needed global settings in the fabfile: dockerKeyFile will copy the referenced private key and its public key into the container dockerAuthorizedKeyFile , the authorized_keys -file, can be a path to a file or an url dockerKnownHostsFile , the known_hosts -file dockerNetRcFile , will copy a .netrc -file into the container (suitable for authenticating against https repositories) Obviously a ssh-demon should be running inside your docker-container.","title":"copySSHKeysToDocker"},{"location":"docker-integration/#predefined-docker-tasks","text":"Phabalicious is running some predefined docker-tasks if set in the fabfile and when using the commands app:create or app:destroy spinUp : get all needed container running spinDown : stop all app-containers deleteContainer : remove and delete all app container If you want to support this in your configuration, add the tasks to the fabfile and its corresponding commands.","title":"Predefined docker-tasks"},{"location":"docker-integration/#conclusion","text":"As you can see, there's not much docker-specific besides the naming. So in theory you can control something else like rancher or maybe even kubectl . All you have is the referencing between a host and a dockerHost and the possibility to run tasks locally or via SSH on a remote instance, and pass data from the host-config or docker-config to your scripts.","title":"Conclusion"},{"location":"installation/","text":"Installation of needed dependencies Phabalicious needs at least PHP 7.1 with the json- and openssl-extensions. The best way is to install it globally by downloading the phar-file: Download phar Download the latest version from Github copy the phar to a suitable folder, e.g. /usr/local/bin and rename it to phab Make it executable, e.g. chmod u+x /usr/local/bin/phab Installation from source Clone the repository via git clone https://github.com/factorial-io/phabalicious.git cd into the folder run composer install run composer build-phar run composer install-phar , this will copy the phar to /usr/local/bin and make it executable. Install it as a project dependency run composer require factorial-io/phabalicious Note, phabalicious is using Symfony 4 so you might get some unresolvable conflicts (Merge Requests welcome!) and then ... Run fab list , this should give you a list of all available commands. Create a configuration file called fabfile.yaml A simple configuration-example name: My awesome project # We'll need phabalicious = 3.0 requires: 3.0 # We need git and ssh, there are more options needs: - ssh - git # Our list of host-configurations hosts: dev: host: myhost.test user: root port: 22 type: dev branch: develop rootFolder: /var/www backupFolder: /var/backups For more infos about the file-format have a look at the file-format-section.","title":"Installation of needed dependencies"},{"location":"installation/#installation-of-needed-dependencies","text":"Phabalicious needs at least PHP 7.1 with the json- and openssl-extensions. The best way is to install it globally by downloading the phar-file:","title":"Installation of needed dependencies"},{"location":"installation/#download-phar","text":"Download the latest version from Github copy the phar to a suitable folder, e.g. /usr/local/bin and rename it to phab Make it executable, e.g. chmod u+x /usr/local/bin/phab","title":"Download phar"},{"location":"installation/#installation-from-source","text":"Clone the repository via git clone https://github.com/factorial-io/phabalicious.git cd into the folder run composer install run composer build-phar run composer install-phar , this will copy the phar to /usr/local/bin and make it executable.","title":"Installation from source"},{"location":"installation/#install-it-as-a-project-dependency","text":"run composer require factorial-io/phabalicious Note, phabalicious is using Symfony 4 so you might get some unresolvable conflicts (Merge Requests welcome!)","title":"Install it as a project dependency"},{"location":"installation/#and-then","text":"Run fab list , this should give you a list of all available commands. Create a configuration file called fabfile.yaml","title":"and then ..."},{"location":"installation/#a-simple-configuration-example","text":"name: My awesome project # We'll need phabalicious = 3.0 requires: 3.0 # We need git and ssh, there are more options needs: - ssh - git # Our list of host-configurations hosts: dev: host: myhost.test user: root port: 22 type: dev branch: develop rootFolder: /var/www backupFolder: /var/backups For more infos about the file-format have a look at the file-format-section.","title":"A simple configuration-example"},{"location":"local-overrides/","text":"Local overrides fabfile.local.yaml is used to override parts of your fabfile-configuration. If you run a fab-command the code will try to find a fabfile.local.yaml up to five folder levels up, or in your user-folder ( ~/.fabfile.local.yaml ) and merge the data with your fabfile.yaml. A small example: fabfile.local.yaml + project fabfile.yaml Contents fo fabfile.yaml hosts: local: host: multibasebox.dev port: 22 [...] Contents of fabfile.local.yaml: hosts: local: host: localhost port: 2222 This will override the host and port settings of the local -configuration. With this technique you can alter an existing fabfile.yaml with local overrides. (In this example, host=localhost and port=2222 Another example: Using a local .netrc -file in the docker-container dockerNetRcFile: /home/user/.netrc","title":"Local overrides"},{"location":"local-overrides/#local-overrides","text":"fabfile.local.yaml is used to override parts of your fabfile-configuration. If you run a fab-command the code will try to find a fabfile.local.yaml up to five folder levels up, or in your user-folder ( ~/.fabfile.local.yaml ) and merge the data with your fabfile.yaml. A small example: fabfile.local.yaml + project fabfile.yaml Contents fo fabfile.yaml hosts: local: host: multibasebox.dev port: 22 [...] Contents of fabfile.local.yaml: hosts: local: host: localhost port: 2222 This will override the host and port settings of the local -configuration. With this technique you can alter an existing fabfile.yaml with local overrides. (In this example, host=localhost and port=2222 Another example: Using a local .netrc -file in the docker-container dockerNetRcFile: /home/user/.netrc","title":"Local overrides"},{"location":"passwords/","text":"Passwords You should not store any sensitive passwords in the fabfile. It's a possible security risk, as the file is part of your repository. That's why phabalicious is heavily relying on key-forwarding for ssh-connections. If key-forwarding does not work, you might get a native ssh-password-prompt. If you are using the method ftp-sync you can add the password to the fabfile, but we strongly discourage this. If you want to store the password permanently so that phabalicious can pick them up, store them in your user-folder in a yml-file called .phabalicious-credentials . The format is as follows user @ host : port : password stephan@localhost:21 : 123456 If no password is available, phabalicious will prompt for one.","title":"Passwords"},{"location":"passwords/#passwords","text":"You should not store any sensitive passwords in the fabfile. It's a possible security risk, as the file is part of your repository. That's why phabalicious is heavily relying on key-forwarding for ssh-connections. If key-forwarding does not work, you might get a native ssh-password-prompt. If you are using the method ftp-sync you can add the password to the fabfile, but we strongly discourage this. If you want to store the password permanently so that phabalicious can pick them up, store them in your user-folder in a yml-file called .phabalicious-credentials . The format is as follows user @ host : port : password stephan@localhost:21 : 123456 If no password is available, phabalicious will prompt for one.","title":"Passwords"},{"location":"scripts/","text":"Scripts Scripts are a powerful concept of phabalicious. There are a lot of places where scripts can be called. The common -section defines common scripts to be run for specific task/installation-type-configurations, docker-tasks are also scripts which you can execute via the docker-command. And you can even script phabalicious tasks and create meta-tasks. And you can add custom scripts to the general section of a fabfile or to a host-configuration. Scripts can call other scripts. A script is basically a list of commands which get executed via shell on a local or remote machine. To stay independent of the host where the script is executed, phabalicious parses the script before executing it and replaces given variables with their counterpart in the yaml file. Replacement-patterns Replacement-Patterns are specific strings enclosed in % s, e.g. %host.port% , %dockerHost.rootFolder% or %arguments.name% . Here's a simple example; script: test: - echo I am running on %host.config_name% Calling this script via phab config:mbb script:test will show I am running on mbb . The host-configuration gets exposes via the host. -prefix, so port maps to %host.port% , etc. The dockerHost-configuration gets exposed via the dockerHost -prefix, so rootFolder maps to %dockerHost.rootFolder% The global configuration of the yams-file gets exposed to the settings -prefix, so uuid gets mapped to `%settings.uuid% Optional arguments to the script -taks get the argument -prefix, e.g. %arguments.name% . You can get all arguments via %arguments.combined% . You can access hierarchical information via the dot-operator, e.g. %host.database.name% If phabalicious detects a pattern it can't replace it will abort the execution of the script and displays a list of available replacement-patterns. Internal commands There are currently 3 internal commands. These commands control the flow inside phabalicious: fail_on_error(1|0) If fail_on_error is set to one, phabalicious will exit if one of the script commands returns a non-zero return-code. When using fail_on_error(0) only a warning is displayed, the script will continue. execute(task, subtask, arguments) execute a phabalicious task. For example you can run a deployment from a script via execute(deploy) or stop a docker-container from a script via execute(docker, stop) fail_on_missing_directory(directory, message) will print message message if the directory directory does not exist. Task-related scripts You can add scripts to the common -section, which will called for any host. You can differentiate by task-name and host-type, e.g. create a script which gets called for the task deploy and type dev . You can even run scripts before or after a task is executed. Append the task with Prepare or Finished . You can even run scripts for specific tasks and hosts. Just add your script with the task-name as its key. host: test: deployPrepare: - echo Preparing deploy for test deploy: - echo Deploying on test deployFinished: - echo Deployment finished for test These scripts in the above examples gets executed only for the host test and task deploy . Examples A rather complex example scripting phabalicious. scripts: runTests: defaults: branch: develop script: - execute(docker, start) - execute(docker, waitForServices) - execute(deploy, %arguments.branch%) - execute(script, behatInstall) - execute(script, behat, --profile=ci --format=junit --format=progress) - execute(getFile, /var/www/_tools/behat/build/behat/default.xml, ./_tools/behat) - execute(docker, stop) This script will start the docker-container, wait for it, deploys the given branch, run a script which will install behat, run behat with some custom arguments, gets the result-file and copy it to a location, and finally stops the container.","title":"Scripts"},{"location":"scripts/#scripts","text":"Scripts are a powerful concept of phabalicious. There are a lot of places where scripts can be called. The common -section defines common scripts to be run for specific task/installation-type-configurations, docker-tasks are also scripts which you can execute via the docker-command. And you can even script phabalicious tasks and create meta-tasks. And you can add custom scripts to the general section of a fabfile or to a host-configuration. Scripts can call other scripts. A script is basically a list of commands which get executed via shell on a local or remote machine. To stay independent of the host where the script is executed, phabalicious parses the script before executing it and replaces given variables with their counterpart in the yaml file.","title":"Scripts"},{"location":"scripts/#replacement-patterns","text":"Replacement-Patterns are specific strings enclosed in % s, e.g. %host.port% , %dockerHost.rootFolder% or %arguments.name% . Here's a simple example; script: test: - echo I am running on %host.config_name% Calling this script via phab config:mbb script:test will show I am running on mbb . The host-configuration gets exposes via the host. -prefix, so port maps to %host.port% , etc. The dockerHost-configuration gets exposed via the dockerHost -prefix, so rootFolder maps to %dockerHost.rootFolder% The global configuration of the yams-file gets exposed to the settings -prefix, so uuid gets mapped to `%settings.uuid% Optional arguments to the script -taks get the argument -prefix, e.g. %arguments.name% . You can get all arguments via %arguments.combined% . You can access hierarchical information via the dot-operator, e.g. %host.database.name% If phabalicious detects a pattern it can't replace it will abort the execution of the script and displays a list of available replacement-patterns.","title":"Replacement-patterns"},{"location":"scripts/#internal-commands","text":"There are currently 3 internal commands. These commands control the flow inside phabalicious: fail_on_error(1|0) If fail_on_error is set to one, phabalicious will exit if one of the script commands returns a non-zero return-code. When using fail_on_error(0) only a warning is displayed, the script will continue. execute(task, subtask, arguments) execute a phabalicious task. For example you can run a deployment from a script via execute(deploy) or stop a docker-container from a script via execute(docker, stop) fail_on_missing_directory(directory, message) will print message message if the directory directory does not exist.","title":"Internal commands"},{"location":"scripts/#task-related-scripts","text":"You can add scripts to the common -section, which will called for any host. You can differentiate by task-name and host-type, e.g. create a script which gets called for the task deploy and type dev . You can even run scripts before or after a task is executed. Append the task with Prepare or Finished . You can even run scripts for specific tasks and hosts. Just add your script with the task-name as its key. host: test: deployPrepare: - echo Preparing deploy for test deploy: - echo Deploying on test deployFinished: - echo Deployment finished for test These scripts in the above examples gets executed only for the host test and task deploy .","title":"Task-related scripts"},{"location":"scripts/#examples","text":"A rather complex example scripting phabalicious. scripts: runTests: defaults: branch: develop script: - execute(docker, start) - execute(docker, waitForServices) - execute(deploy, %arguments.branch%) - execute(script, behatInstall) - execute(script, behat, --profile=ci --format=junit --format=progress) - execute(getFile, /var/www/_tools/behat/build/behat/default.xml, ./_tools/behat) - execute(docker, stop) This script will start the docker-container, wait for it, deploys the given branch, run a script which will install behat, run behat with some custom arguments, gets the result-file and copy it to a location, and finally stops the container.","title":"Examples"},{"location":"usage/","text":"Running phabalicious To execute a task with the help of phabalicious, just cd your-project-folder phab --config= your-config-key task This will read your fabfile.yaml, look for your-config-key in the host-section and run the task Tasks Some Background Phabalicious provides a set of so-called methods which implement all listed functionality. The following methods are available: local git ssh drush composer files docker drupalconsole mattermost platform ftp-sync You declare your needs in the fabfile.yaml with the key needs , e.g. needs: - git - ssh - drush - files Have a look at the file-format documentation for more info. List of available tasks You can get a list of available commands with phab list","title":"Running phabalicious"},{"location":"usage/#running-phabalicious","text":"To execute a task with the help of phabalicious, just cd your-project-folder phab --config= your-config-key task This will read your fabfile.yaml, look for your-config-key in the host-section and run the task","title":"Running phabalicious"},{"location":"usage/#tasks","text":"","title":"Tasks"},{"location":"usage/#some-background","text":"Phabalicious provides a set of so-called methods which implement all listed functionality. The following methods are available: local git ssh drush composer files docker drupalconsole mattermost platform ftp-sync You declare your needs in the fabfile.yaml with the key needs , e.g. needs: - git - ssh - drush - files Have a look at the file-format documentation for more info.","title":"Some Background"},{"location":"usage/#list-of-available-tasks","text":"You can get a list of available commands with phab list","title":"List of available tasks"}]}